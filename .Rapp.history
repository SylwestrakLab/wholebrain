length(images)
get.grid.coordinates(1:length(images), tilesize = 4710, plotgrid=TRUE)
filename<-system.file('sample_tiles/rabiesEGFP.tif', package='wholebrain')#
output<-segment(filename)
get.grid.coordinates(1:length(images), tilesize = 4710, plotgrid=TRUE)
folder<-'/Users/emily/images/tdTomato'
images<-get.images(folder)
length(images)
get.grid.coordinates(1:length(images), tilesize = 1024, plotgrid=TRUE)
stitch(folder, show.image=TRUE)
if (!require(devtools)) {#
  install.packages("devtools")#
}#
devtools::install_github("tractatus/wholebrain")
library(wholebrain)#
filename<-system.file('sample_tiles/rabiesEGFP.tif', package='wholebrain')#
output<-segment(filename)
folder<-'/Users/emily/Google Drive⁩/My Drive⁩/20191126_Tac1xAi14.tif'
images<-get.images(folder)
length(images)
folder<-'/Users/emily/Google Drive⁩/My Drive⁩/TacAi14/Substack.tif'
images<-get.images(folder)
length(images)
folder<-'/Users/emily/Google Drive⁩/My Drive⁩/TacAi14/Stack/'
images<-get.images(folder)
length(images)
folder<-'/Users/emily/Google Drive⁩/My Drive⁩/TacAi14/Stack'
images<-get.images(folder)
length(images)
folder<-'/Users/emily/Google Drive⁩/My Drive⁩/Tac1Ai14/Stack'
images<-get.images(folder)
length(images)
folder<-'/Users/emily/Stack'
images<-get.images(folder)
length(images)
# Initialize #
library(wholebrain)#
#
# Get images#
folder<-file.path(getwd(), "..", "m1060","m1060-2")#
imagefile<-list.files(folder, full.names=TRUE)#
# Segment out neurons and the brain outline from autofluorescence.#
seg<-wholebrain::segment(imagefile)#
#
# Determine Section Position#
fromBregma <- -2.04#
#
#Registration#
quartz()#
regi<-registration(imagefile, coordinate= fromBregma, filter=seg$filter)#
#
# Add Additional Points#
regi<-add.corrpoints(regi, 3)#
regi<-registration(imagefile, coordinate= fromBregma, filter=seg$filter, correspondance = regi)#
#
# Plot Cells on Atlas#
dataset<-inspect.registration(regi, seg, forward.warps = TRUE)#
#
mainDir <- file.path(getwd(), mouse,subfolder)#
subDir <- "plots"#
if (file.exists(file.path(mainDir,subDir))){#
} else {#
    dir.create(file.path(mainDir, subDir))#
}#
filename = paste(file.path(getwd(),"plots") , "inspectRegi.pdf",sep = "_", collapse=NULL)#
quartz.save(file.path(saveFolder,filename),type="pdf")#
#
# Plot Bargraph#
dot.plot(dataset)#
filename = paste(list.files(saveFolder) , "plot.pdf",sep = "_", collapse=NULL)#
quartz.save(file.path(saveFolder,filename),type="pdf")
folder<-file.path(getwd(), "..", "m1060","m1060-2")
folder
#Load Packages and modified plotting function#
library(wholebrain)#
genotype <- 'Tac1'#
counts.plot<-function (dataset, device = TRUE, region.lab = "Input region:", xlab= 'Cell count') #
{#
  if(ncol(dataset)<3){#
    counts<-dataset#
  }else{#
    counts <- table(as.character(dataset$acronym), dataset$right.hemisphere)#
  }#
  maxCounts<-apply(counts, 1, FUN=max)#
  idxKeepRow<- which(maxCounts>1)#
  counts<-counts[idxKeepRow,]#
  hemisphere.to.sort <- which.max(colSums(counts*is.finite(counts),na.rm=TRUE ))#
  counts <- counts[order(counts[, hemisphere.to.sort], decreasing = TRUE), ]#
  counts <- log10(counts)#
  if (device) {#
    #quartz(width = 7.036585, height = 0.2099039 * nrow(counts))#
    quartz(width = 17.036585, height = 20.2099039)#
  }#
  quartz(width = 7.036585, height = 10.2099039)#
  layout(matrix(c(1, 1, 1, 2, 2, 2, 2), nrow = 1))#
  par(mar = c(4, 2, 4, 2))#
  par(mar=rep(1,4))#
  plot(rep(2.5, nrow(counts)), nrow(counts):1, col = 0, #
       axes = F, ylim = c(0.5, nrow(counts) + 0.5), ylab = "", #
       xlab = "", xlim = c(1, 5))#
  mtext(region.lab, 3, cex = 0.9)#
  for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.1)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(1, 5, 5, 1), c(y.lab - 0.5, y.lab - 0.5, #
                             y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
    text(3, y.lab, name.from.acronym(row.names(counts)[i]), #
         cex = 0.9)#
  }#
  par(xpd = TRUE)#
  legend(3, -0.75, c("Left", "Right"), pch = c(21), pt.bg = c("white", #
                                                              gray(0.2)), title = "Hemisphere:", bg = "white", #
         horiz = TRUE, cex = 1.3, xjust = 0.5)#
  par(xpd = FALSE)#
  par(mar = c(4, 4, 4, 6))#
  zeros <- min(is.finite(counts)) - 1#
  counts[!is.finite(counts)] <- zeros#
  x.range <- ceiling(range(counts[is.finite(counts)]))#
  plot(apply(counts, 1, max), nrow(counts):1 - 0.125, pch = 21, #
       bg = "white", ylim = c(0.5, nrow(counts) + 0.5), #
       xlim = x.range, xlab = "", axes = F, ylab = "", col = 0)#
  for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.05)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(x.range, rev(x.range)), c(y.lab - 0.5, #
                                        y.lab - 0.5, y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
  }#
  log.range <- 10^seq(x.range[1], x.range[2])#
  axis(1, at = seq(x.range[1], x.range[2]), las = 1, labels = c(0, #
                                                                log.range[-1]))#
  axis(3, at = seq(x.range[1], x.range[2]), las = 1, labels = c(0, #
                                                                log.range[-1]))#
  log.range <- unlist(lapply(1:(length(log.range) - 1), #
                             function(x) {#
                               seq(log.range[x], log.range[x + 1], by = log.range[x])#
                             }))#
  axis(1, at = log10(log.range), labels = FALSE)#
  axis(3, at = log10(log.range), labels = FALSE)#
  axis(2, at = nrow(counts):1, labels = row.names(counts), #
       las = 1)#
  axis(4, at = nrow(counts):1, labels = row.names(counts), #
       las = 1)#
  abline(h = 1:nrow(counts), lty = 2, col = "gray")#
  abline(v = log10(log.range), col = "lightblue")#
  lapply(1:nrow(counts), function(x) {#
    lines(counts[x, ], rep(nrow(counts) - x + 1, 2), #
          lwd = 2)#
  })#
  points(counts[, 2], nrow(counts):1, #
         pch = 21, bg = gray(0.2), cex = 1.2)#
  points(counts[, 1], nrow(counts):1, #
         pch = 21, bg = "white", cex = 1.2)#
  box()#
  par(xpd = TRUE)#
  polygon(c(x.range[1] + 0.25, x.range[1] + 0.5, x.range[1] + #
              0.5, x.range[1] + 0.25), c(-2, -2, nrow(counts) + #
                                           3, nrow(counts) + 3), col = "white", border = "white")#
  par(xpd = FALSE)#
  abline(v = c(x.range[1] + 0.25, x.range[1] + 0.5))#
  mtext(xlab, 3, 2.2, cex = 0.8)#
  mtext(xlab, 1, 2.2, cex = 0.8)#
}#
#
#Mouse to analyze#
mouse<-'m1083'#
#
#set animal folder path#
animalFolder<-file.path(getwd(),'BHdata', mouse)#
imageFolders<-list.files(animalFolder, full.names=TRUE)#
#
#Start with the first section#
i = 1#
sectionFolder = imageFolders[i]#
imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
if (length(imageFiles)==1) {#
  load(imageFiles[1])#
  datasets<-dataset#
} else {#
  df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
  mostRecent<-rownames(df)[which.max(df$mtime)]#
  load(mostRecent)#
  datasets<-dataset#
}#
#Use Rbind to add addictional sections#
for(i in 2:length(imageFolders)){#
  sectionFolder = imageFolders[i]#
  imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
  if (length(imageFiles)==1) {#
    if (!grepl("x", imageFiles[1], fixed = TRUE)) {#
      load(imageFiles[1])#
      datasets<-rbind(datasets, dataset)#
    }#
  } else {#
    if (!grepl("x", imageFiles[1], fixed = TRUE)) {#
    df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
    mostRecent<-rownames(df)[which.max(df$mtime)]#
    load(mostRecent)#
    datasets<-dataset#
    }#
  }#
}#
#
#Plot the combined data and save out a combined .Rdata file#
counts.plot(datasets)#
filename <- file.path(getwd(),'Composite Data',genotype,'CompositeData',paste(mouse, '_composite_plot.pdf',sep = "", collapse=NULL))#
quartz.save(filename,type="pdf")#
save(datasets, file=file.path(getwd(),'Composite Data',genotype, 'CompositeData',paste(mouse, '_compositeData.Rdata',sep = "", collapse=NULL)))
i = 1#
sectionFolder = imageFolders[i]#
imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
if (length(imageFiles)==1) {#
  load(imageFiles[1])#
  datasets<-dataset#
} else {#
  df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
  mostRecent<-rownames(df)[which.max(df$mtime)]#
  load(mostRecent)#
  datasets<-dataset#
}
library(wholebrain)#
#
# Define what section you want to analyze#
mouse = "m1107"#
sectionNumber = '31'#
subfolder = paste(mouse, sectionNumber, sep = "-", collapse=NULL)
imagepath<-"/Volumes/GoogleDrive/My Drive/Rabies_registration/wholebrain/m1107/m1107_31c1.tif"
orig<- length(seg$soma$x)
load("/Volumes/GoogleDrive/My Drive/Rabies_registration/wholebrain/BHdata/m1107/m1107_31/m1107_31_2.Rdata")
b<-raster::raster(imagepath)
quartz()#
plot(b,legend=FALSE)
points(seg$soma$x, seg$soma$y,cex=0.01)
zoom::zm()
zm()
basecord<- c(seg$soma$x[3],seg$soma$y[3])
legends_coord <- locator(1)
legends_coord
basecord
seg$soma$x
numthresh=8, downsample=0.25, filter=NULL, post=NULL, pre=NULL, get.contour=FALSE, channel = 0, display=TRUE)
numthresh=8
downsample=0.25
filter=NULL
post=NULL
pre=NULL
get.contour=FALSE
channel = 0
display=TRUE
inputfile<-character()
for(i in 1:length(input)){#
    inputfile <- as.character(input[i])#
    ## check for existence#
    if(!file.exists(inputfile))#
      stop(inputfile, ", file not found")#
    inputfile <- path.expand(inputfile)#
  #  files<-append(files, file)#
  }
input<-imagepath
inputfile<-character()#
  for(i in 1:length(input)){#
    inputfile <- as.character(input[i])#
    ## check for existence#
    if(!file.exists(inputfile))#
      stop(inputfile, ", file not found")#
    inputfile <- path.expand(inputfile)#
  #  files<-append(files, file)#
  }
file <- system.file('double_slider.png', package='wholebrain')#
  fileslider <- system.file('slider.png', package='wholebrain')#
  filebackground <- system.file('GUI_background.png', package='wholebrain')#
  resizeP = as.integer(downsample*100)
if(is.null(filter)){#
    areaMin<-(-999)#
    areaMax<-(-999)#
    threshMin<-(-999)#
    threshMax<-(-999)#
    eccent<-(-999)#
    renderMax<-(-999)#
    renderMin<-(-999)#
    bThresh<-(-999)#
    resizeB<-(-999)#
    gaussBlur<-(-999)#
  }else{#
    areaMin<-filter$alim[1]#
    areaMax<-filter$alim[2]#
    threshMin<-filter$threshold.range[1]#
    threshMax<-filter$threshold.range[2]#
    eccent<-filter$eccentricity[1]#
    renderMax<-filter$Max#
    renderMin<-filter$Min#
    bThresh<-filter$brain.threshold#
    resizeB<-filter$resize#
    resizeP<-as.integer(filter$downsample*100)#
    gaussBlur<-filter$blur#
    downsample<-filter$downsample#
  }
#check for #
  if(is.null(pre)){#
    prefiltering<-FALSE#
    transformation<-0#
    iterations<-0   #
  }else{#
    prefiltering<-TRUE#
    transformation<-pre$trans#
    iterations<-pre$iter   #
  }#
#
  #check for post-filtering#
  if(is.null(post)){#
    postfiltering<-TRUE#
    transformation<-0#
    iterations<-0   #
  }else{#
    postfiltering<-TRUE#
    transformation<-pre$trans#
    iterations<-pre$iter   #
  }
a<-.Call("GUI",inputfile,numthresh, resizeP,file,fileslider,filebackground, display, areaMin, areaMax, threshMin, threshMax, eccent, renderMin, renderMax, bThresh, resizeB, gaussBlur, as.integer(get.contour), as.integer(channel))#
  a$x<-(1/ downsample)*a$x#
  a$y<-(1/ downsample)*a$y#
  a$contour.x<-(1/ downsample)*a$contour.x#
  a$contour.y<-(1/ downsample)*a$contour.y#
  a$soma.area <-(1/ downsample)*a$soma.area#
  outputlist<-list(filter=list(alim= a$alim, threshold.range = a$threshold.range, eccentricity = a$eccentricity,  Max = a$Max, Min = a$Min, brain.threshold=a$brain.threshold, resize=a$resize, blur=a$blur, downsample=a$downsample), soma = list(x =a$x, y=a$y, intensity = a$intensity, area = a$soma.area, contour.x= a$contour.x, contour.y=a$contour.y, contour.ID=a$contour.ID))#
  if(is.null(outputlist$filter$Min)){#
    outputlist$filter$Min<-0#
  }#
  return(outputlist)#
}
a<-.Call("GUI",inputfile,numthresh, resizeP,file,fileslider,filebackground, display, areaMin, areaMax, threshMin, threshMax, eccent, renderMin, renderMax, bThresh, resizeB, gaussBlur, as.integer(get.contour), as.integer(channel))
a
imshow<-function(input, auto.range = FALSE, quantile = c(0.001,0.999), resize=0.25){#
  inputfile<-character()#
  for(i in 1:length(input)){#
    inputfile <- as.character(input[i])#
    ## check for existence#
    if(!file.exists(inputfile))#
      stop(inputfile, ", file not found")#
    inputfile <- path.expand(inputfile)#
  #  files<-append(files, file)#
  }
imshow<-function(input, auto.range = FALSE, quantile = c(0.001,0.999), resize=0.25){#
  inputfile<-character()#
  for(i in 1:length(input)){#
    inputfile <- as.character(input[i])#
    ## check for existence#
    if(!file.exists(inputfile))#
      stop(inputfile, ", file not found")#
    inputfile <- path.expand(inputfile)#
  #  files<-append(files, file)#
  }#
#
  file <- system.file('double_slider.png', package='wholebrain')#
  fileslider <- system.file('slider.png', package='wholebrain')#
  filebackground <- system.file('_background.png', package='wholebrain')#
  resizeP = as.integer(resize*100)#
  a<-.Call("imageshow",inputfile, as.integer(auto.range), quantile[1], quantile[2], resizeP,file,fileslider,filebackground)#
  if(auto.range){b<-a$quantile.values#
    names(b)<-paste(round(a$quantile*100,2), '%', sep='')#
    return(b)#
  }#
}
imshow(imagepath)
nuclear.segment(imagepath)
imshow(imagepath)
quartz()
imshow(imagepath)
imagepath
b<-raster::raster(imagepath)#
quartz()#
plot(b,legend=FALSE)
a<-.Call("GUI",inputfile,numthresh, resizeP,file,fileslider,filebackground, display, areaMin, areaMax, threshMin, threshMax, eccent, renderMin, renderMax, bThresh, resizeB, gaussBlur, as.integer(get.contour), as.integer(channel))
imshow(imagepath)
b<-raster::raster(imagepath)#
quartz()#
plot(b,legend=FALSE)
points(seg$soma$x, seg$soma$y,cex=0.01)
seg
points(seg$soma$x, seg$soma$y,cex=0.1)
seg<-wholebrain::segment(imagefile[1],downsample = 1,filter = seg$filter)
seg<-wholebrain::segment(imagepath,downsample = 1,filter = seg$filter)
b<-raster::raster(imagepath)#
quartz()#
plot(b,legend=FALSE)
points(seg$soma$x, seg$soma$y,cex=0.1)
seg
seg<-wholebrain::segment(imagepath,downsample = 1)
orig<- length(seg$soma$x)
b<-raster::raster(imagepath)#
quartz()#
plot(b,legend=FALSE)
points(seg$soma$x, seg$soma$y,cex=0.1)
seg
seg<-wholebrain::segment(imagepath,downsample = 1)
load("/Volumes/GoogleDrive/My Drive/Rabies_registration/wholebrain/BHdata/m1107/m1107_31/m1107_31_2.Rdata")
seg<-wholebrain::segment(imagepath,filter=seg$filter)
seg
b<-raster::raster(imagepath)#
quartz()#
plot(b,legend=FALSE)
points(seg$soma$x, seg$soma$y,cex=0.01)
points(seg$soma$x, seg$soma$y,cex=0.1)
load("/Volumes/GoogleDrive/My Drive/Rabies_registration/wholebrain/BHdata/m1107/m1107_31/m1107_31_2.Rdata")
seg
load("/Volumes/GoogleDrive/My Drive/Rabies_registration/wholebrain/BHdata/m1107/m1107_32/m1107_32.Rdata")
imagepath<-"/Volumes/GoogleDrive/My Drive/Rabies_registration/wholebrain/m1107/m1107_32c1.tif"
seg<-wholebrain::segment(imagepath,filter=seg$filter)
load("/Volumes/GoogleDrive/My Drive/Rabies_registration/wholebrain/BHdata/m1107/m1107_26/m1107_26.Rdata")
seg
b<-raster::raster(imagepath)#
quartz()#
plot(b,legend=FALSE)
points(seg$soma$x, seg$soma$y,cex=0.01)
points(seg$soma$x, seg$soma$y,cex=0.1)
load("/Volumes/GoogleDrive/My Drive/Rabies_registration/wholebrain/BHdata/m1107/m1107_34/m1107_34.Rdata")
imagepath<-"/Volumes/GoogleDrive/My Drive/Rabies_registration/wholebrain/m1107/m1107_34c1.tif"
b<-raster::raster(imagepath)#
quartz()#
plot(b,legend=FALSE)
points(seg$soma$x, seg$soma$y,cex=0.1)
library(wholebrain)#
#
# Define what section you want to analyze#
mouse = "m1107"#
sectionNumber = '34'
seg$AP
seg
seg<-wholebrain::segment(imagepath)
dataset$AP
fromBregma<-dataset$AP[1]
quartz()#
regi<-registration(imagepath, coordinate= fromBregma, filter=seg$filter)
b<-raster::raster(imagepath)#
quartz()#
plot(b,legend=FALSE)
seg
points(seg$soma$x, seg$soma$y,cex=0.1)
flip(imagepath, 'y')
library(raster)
flip(imagepath, 'y')
flip(b, 'y')
b<-raster::raster(imagepath)#
b<-flip(b,'y')#
quartz()#
plot(b,legend=FALSE)
points(seg$soma$x, seg$soma$y,cex=0.1)
legends_coord <- locator(1)
legends_cord
legends_coord
seg
points(seg$soma$x[1], seg$soma$y[1],cex=1)
legends_coord
seg
orig<- length(seg$soma$x)
orgi
orig
soma$x[orig+1]<-legends_coord$x
seg$soma$x[orig+1]<-legends_coord$x
seg$soma$x[orig+1]<-legends_coord$x#
seg
seg$soma$y[orig+1]<-legends_coord$y
seg
imagepath
seg
regi<-registration(imagepath, coordinate= dataset$AP[1], filter=seg$filter)
seg<-wholebrain::segment(imagepath,downsample=.25,filter=seg$filter)
load("/Volumes/GoogleDrive/My Drive/Rabies_registration/wholebrain/BHdata/m1107/m1107_34/m1107_34.Rdata")
seg<-wholebrain::segment(imagepath,downsample=.25,filter=seg$filter)
fromBregma<-dataset$AP[1]
regi<-registration(imagepath, coordinate= fromBregma, filter=seg$filter)
quartz()#
regi<-registration(imagefile[1], coordinate= fromBregma, filter=seg$filter)
quartz()#
regi<-registration(imagepath, coordinate= fromBregma, filter=seg$filter)
seg
seg<-wholebrain::segment(imagpath, downsample=.25,filter=seg$filter)
seg<-wholebrain::segment(imagepath, downsample=.25,filter=seg$filter)
load("/Volumes/GoogleDrive/My Drive/Rabies_registration/wholebrain/Composite Data/Th/m812_compositeData.Rdata")#
quartz#
counts.plot(datasets)
setwd('/Volumes/GoogleDrive/My Drive/Rabies_registration/wholebrain')#
library(wholebrain)#
genotype <- 'Th'
counts.plot<-function (dataset, device = TRUE, region.lab = "Input region:", xlab= 'Cell count', countThreshold = 10, sorted = TRUE) #
{#
  if(ncol(dataset)<3){#
    counts<-dataset#
  }else{#
    counts <- table(as.character(dataset$acronym), dataset$right.hemisphere)#
  }#
  #counts <- table(as.character(datasets$acronym), datasets$right.hemisphere)#
  maxCounts<-apply(counts, 1, FUN=max)#
  idxKeepRow<- which(maxCounts>countThreshold)#
  counts<-counts[idxKeepRow,]#
  #hemisphere.to.sort <- which.max(colSums(counts*is.finite(counts),na.rm=TRUE ))#
  if (sorted) {#
  counts <- cbind(counts, Total = rowSums(counts))#
  counts <- counts[order(counts[, 3], decreasing = TRUE), ]#
  counts <- counts[,1:2]#
  }#
  #counts <- counts[order(counts[, hemisphere.to.sort], decreasing = TRUE), ]#
  counts <- log10(counts)#
  if (device) {#
    #quartz(width = 7.036585, height = 0.2099039 * nrow(counts))#
    quartz(width = 17.036585, height = 20.2099039)#
  }#
  quartz(width = 7.036585, height = 10.2099039)#
  layout(matrix(c(1, 1, 1, 2, 2, 2, 2), nrow = 1))#
  par(mar = c(4, 2, 4, 2))#
  par(mar=rep(1,4))#
  plot(rep(2.5, nrow(counts)), nrow(counts):1, col = 0, #
       axes = F, ylim = c(0.5, nrow(counts) + 0.5), ylab = "", #
       xlab = "", xlim = c(1, 5))#
  mtext(region.lab, 3, cex = 0.9)#
  for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.1)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(1, 5, 5, 1), c(y.lab - 0.5, y.lab - 0.5, #
                             y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
    text(3, y.lab, name.from.acronym(row.names(counts)[i]), #
         cex = 0.9)#
  }#
  par(xpd = TRUE)#
  legend(3, -0.75, c("Left", "Right"), pch = c(21), pt.bg = c("white", #
                                                              gray(0.2)), title = "Hemisphere:", bg = "white", #
         horiz = TRUE, cex = 1.3, xjust = 0.5)#
  par(xpd = FALSE)#
  par(mar = c(4, 4, 4, 6))#
  zeros <- min(is.finite(counts)) - 1#
  counts[!is.finite(counts)] <- zeros#
  x.range <- ceiling(range(counts[is.finite(counts)]))#
  plot(apply(counts, 1, max), nrow(counts):1 - 0.125, pch = 21, #
       bg = "white", ylim = c(0.5, nrow(counts) + 0.5), #
       xlim = x.range, xlab = "", axes = F, ylab = "", col = 0)#
  for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.05)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(x.range, rev(x.range)), c(y.lab - 0.5, #
                                        y.lab - 0.5, y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
  }#
  log.range <- 10^seq(x.range[1], x.range[2])#
  axis(1, at = seq(x.range[1], x.range[2]), las = 1, labels = c(0, #
                                                                log.range[-1]))#
  axis(3, at = seq(x.range[1], x.range[2]), las = 1, labels = c(0, #
                                                                log.range[-1]))#
  log.range <- unlist(lapply(1:(length(log.range) - 1), #
                             function(x) {#
                               seq(log.range[x], log.range[x + 1], by = log.range[x])#
                             }))#
  axis(1, at = log10(log.range), labels = FALSE)#
  axis(3, at = log10(log.range), labels = FALSE)#
  axis(2, at = nrow(counts):1, labels = row.names(counts), #
       las = 1)#
  axis(4, at = nrow(counts):1, labels = row.names(counts), #
       las = 1)#
  abline(h = 1:nrow(counts), lty = 2, col = "gray")#
  abline(v = log10(log.range), col = "lightblue")#
  lapply(1:nrow(counts), function(x) {#
    lines(counts[x, ], rep(nrow(counts) - x + 1, 2), #
          lwd = 2)#
  })#
  points(counts[, 2], nrow(counts):1, #
         pch = 21, bg = gray(0.2), cex = 1.2)#
  points(counts[, 1], nrow(counts):1, #
         pch = 21, bg = "white", cex = 1.2)#
  box()#
  par(xpd = TRUE)#
  polygon(c(x.range[1] + 0.25, x.range[1] + 0.5, x.range[1] + #
              0.5, x.range[1] + 0.25), c(-2, -2, nrow(counts) + #
                                           3, nrow(counts) + 3), col = "white", border = "white")#
  par(xpd = FALSE)#
  abline(v = c(x.range[1] + 0.25, x.range[1] + 0.5))#
  mtext(xlab, 3, 2.2, cex = 0.8)#
  mtext(xlab, 1, 2.2, cex = 0.8)#
}
load("/Volumes/GoogleDrive/My Drive/Rabies_registration/wholebrain/Composite Data/Th/m812_compositeData.Rdata")#
quartz#
counts.plot(datasets)
#Load Packages and modified plotting function#
setwd('/Volumes/GoogleDrive/My Drive/Rabies_registration/wholebrain')#
library(wholebrain)#
genotype <- 'Th'#
counts.plot<-function (dataset, device = TRUE, region.lab = "Input region:", xlab= 'Cell count', countThreshold = 10, sorted = TRUE) #
{#
  if(ncol(dataset)<3){#
    counts<-dataset#
  }else{#
    counts <- table(as.character(dataset$acronym), dataset$right.hemisphere)#
  }#
  #counts <- table(as.character(datasets$acronym), datasets$right.hemisphere)#
  maxCounts<-apply(counts, 1, FUN=max)#
  idxKeepRow<- which(maxCounts>countThreshold)#
  counts<-counts[idxKeepRow,]#
  #hemisphere.to.sort <- which.max(colSums(counts*is.finite(counts),na.rm=TRUE ))#
  if (sorted) {#
  counts <- cbind(counts, Total = rowSums(counts))#
  counts <- counts[order(counts[, 3], decreasing = TRUE), ]#
  counts <- counts[,1:2]#
  }#
  #counts <- counts[order(counts[, hemisphere.to.sort], decreasing = TRUE), ]#
  counts <- log10(counts)#
  if (device) {#
    #quartz(width = 7.036585, height = 0.2099039 * nrow(counts))#
    quartz(width = 17.036585, height = 20.2099039)#
  }#
  quartz(width = 7.036585, height = 10.2099039)#
  layout(matrix(c(1, 1, 1, 2, 2, 2, 2), nrow = 1))#
  par(mar = c(4, 2, 4, 2))#
  par(mar=rep(1,4))#
  plot(rep(2.5, nrow(counts)), nrow(counts):1, col = 0, #
       axes = F, ylim = c(0.5, nrow(counts) + 0.5), ylab = "", #
       xlab = "", xlim = c(1, 5))#
  mtext(region.lab, 3, cex = 0.9)#
  for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.1)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(1, 5, 5, 1), c(y.lab - 0.5, y.lab - 0.5, #
                             y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
    text(3, y.lab, name.from.acronym(row.names(counts)[i]), #
         cex = 0.9)#
  }#
  par(xpd = TRUE)#
  legend(3, -0.75, c("Left", "Right"), pch = c(21), pt.bg = c("white", #
                                                              gray(0.2)), title = "Hemisphere:", bg = "white", #
         horiz = TRUE, cex = 1.3, xjust = 0.5)#
  par(xpd = FALSE)#
  par(mar = c(4, 4, 4, 6))#
  zeros <- min(is.finite(counts)) - 1#
  counts[!is.finite(counts)] <- zeros#
  x.range <- ceiling(range(counts[is.finite(counts)]))#
  plot(apply(counts, 1, max), nrow(counts):1 - 0.125, pch = 21, #
       bg = "white", ylim = c(0.5, nrow(counts) + 0.5), #
       xlim = x.range, xlab = "", axes = F, ylab = "", col = 0)#
  for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.05)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(x.range, rev(x.range)), c(y.lab - 0.5, #
                                        y.lab - 0.5, y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
  }#
  log.range <- 10^seq(x.range[1], x.range[2])#
  axis(1, at = seq(x.range[1], x.range[2]), las = 1, labels = c(0, #
                                                                log.range[-1]))#
  axis(3, at = seq(x.range[1], x.range[2]), las = 1, labels = c(0, #
                                                                log.range[-1]))#
  log.range <- unlist(lapply(1:(length(log.range) - 1), #
                             function(x) {#
                               seq(log.range[x], log.range[x + 1], by = log.range[x])#
                             }))#
  axis(1, at = log10(log.range), labels = FALSE)#
  axis(3, at = log10(log.range), labels = FALSE)#
  axis(2, at = nrow(counts):1, labels = row.names(counts), #
       las = 1)#
  axis(4, at = nrow(counts):1, labels = row.names(counts), #
       las = 1)#
  abline(h = 1:nrow(counts), lty = 2, col = "gray")#
  abline(v = log10(log.range), col = "lightblue")#
  lapply(1:nrow(counts), function(x) {#
    lines(counts[x, ], rep(nrow(counts) - x + 1, 2), #
          lwd = 2)#
  })#
  points(counts[, 2], nrow(counts):1, #
         pch = 21, bg = gray(0.2), cex = 1.2)#
  points(counts[, 1], nrow(counts):1, #
         pch = 21, bg = "white", cex = 1.2)#
  box()#
  par(xpd = TRUE)#
  polygon(c(x.range[1] + 0.25, x.range[1] + 0.5, x.range[1] + #
              0.5, x.range[1] + 0.25), c(-2, -2, nrow(counts) + #
                                           3, nrow(counts) + 3), col = "white", border = "white")#
  par(xpd = FALSE)#
  abline(v = c(x.range[1] + 0.25, x.range[1] + 0.5))#
  mtext(xlab, 3, 2.2, cex = 0.8)#
  mtext(xlab, 1, 2.2, cex = 0.8)#
}#
#
#Mouse to analyze#
mouse<-'m812'#
#
#set animal folder path#
animalFolder<-file.path(getwd(),'BHdata', mouse)#
imageFolders<-list.files(animalFolder, full.names=TRUE)#
#
#Start with the first section#
i = 1#
sectionFolder = imageFolders[i]#
imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
if (length(imageFiles)==1) {#
  load(imageFiles[1])#
  dataset$animal=mouse#
  datasets<-dataset#
} else {#
  df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
  mostRecent<-rownames(df)[which.max(df$mtime)]#
  load(mostRecent)#
  datasets<-dataset#
}#
#Use Rbind to add addictional sections#
for(i in 2:length(imageFolders)){#
  sectionFolder = imageFolders[i]#
  imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
  if (length(imageFiles)>0) {#
    if (length(imageFiles)==1) {#
      if (!grepl("x", imageFiles[1], fixed = TRUE)) {#
        load(imageFiles[1])#
        dataset$animal=mouse#
        datasets<-rbind(datasets, dataset)#
      }#
    } else {#
      if (!grepl("x", imageFiles[1], fixed = TRUE)) {#
      df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
      mostRecent<-rownames(df)[which.max(df$mtime)]#
      load(mostRecent)#
      dataset$animal=mouse#
      datasets<-rbind(datasets, dataset)#
      }#
    }#
  }#
}#
#
#Plot the combined data and save out a combined .Rdata file#
load("/Volumes/GoogleDrive/My Drive/Rabies_registration/wholebrain/Composite Data/Th/m812_compositeData.Rdata")#
quartz#
counts.plot(datasets)
filename
filename <- "/Volumes/GoogleDrive/My Drive/Rabies_registration/wholebrain/Composite Data/Th/m812_compositeData.pdf"#
quartz.save(filename,type="pdf")
load("/Volumes/GoogleDrive/My Drive/Rabies_registration/wholebrain/Composite Data/Th/m812_compositeData.Rdata")#
quartz#
counts.plot(datasets)#
filename <- "/Volumes/GoogleDrive/My Drive/Rabies_registration/wholebrain/Composite Data/Th/m812_compositeData.pdf"#
quartz.save(filename,type="pdf")
#Mouse to analyze#
mouse<-'m812'#
#
#set animal folder path#
animalFolder<-file.path(getwd(),'BHdata', mouse)#
imageFolders<-list.files(animalFolder, full.names=TRUE)#
#
#Start with the first section#
i = 1#
sectionFolder = imageFolders[i]#
imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
if (length(imageFiles)==1) {#
  load(imageFiles[1])#
  dataset$animal=mouse#
  datasets<-dataset#
} else {#
  df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
  mostRecent<-rownames(df)[which.max(df$mtime)]#
  load(mostRecent)#
  datasets<-dataset#
}#
#Use Rbind to add addictional sections#
for(i in 2:length(imageFolders)){#
  sectionFolder = imageFolders[i]#
  imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
  if (length(imageFiles)>0) {#
    if (length(imageFiles)==1) {#
      if (!grepl("x", imageFiles[1], fixed = TRUE)) {#
        load(imageFiles[1])#
        dataset$animal=mouse#
        datasets<-rbind(datasets, dataset)#
      }#
    } else {#
      if (!grepl("x", imageFiles[1], fixed = TRUE)) {#
      df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
      mostRecent<-rownames(df)[which.max(df$mtime)]#
      load(mostRecent)#
      dataset$animal=mouse#
      datasets<-rbind(datasets, dataset)#
      }#
    }#
  }#
}#
#
#Plot the combined data and save out a combined .Rdata file#
quartz#
counts.plot(datasets)#
filename <- "/Volumes/GoogleDrive/My Drive/Rabies_registration/wholebrain/Composite Data/Th/CompositeData/m812_compositeData.pdf"#
quartz.save(filename,type="pdf")
#Mouse to analyze#
mouse<-'m2145'#
#
#set animal folder path#
animalFolder<-file.path(getwd(),'BHdata', mouse)#
imageFolders<-list.files(animalFolder, full.names=TRUE)#
#
#Start with the first section#
i = 1#
sectionFolder = imageFolders[i]#
imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
if (length(imageFiles)==1) {#
  load(imageFiles[1])#
  dataset$animal=mouse#
  datasets<-dataset#
} else {#
  df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
  mostRecent<-rownames(df)[which.max(df$mtime)]#
  load(mostRecent)#
  datasets<-dataset#
}#
#Use Rbind to add addictional sections#
for(i in 2:length(imageFolders)){#
  sectionFolder = imageFolders[i]#
  imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
  if (length(imageFiles)>0) {#
    if (length(imageFiles)==1) {#
      if (!grepl("x", imageFiles[1], fixed = TRUE)) {#
        load(imageFiles[1])#
        dataset$animal=mouse#
        datasets<-rbind(datasets, dataset)#
      }#
    } else {#
      if (!grepl("x", imageFiles[1], fixed = TRUE)) {#
      df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
      mostRecent<-rownames(df)[which.max(df$mtime)]#
      load(mostRecent)#
      dataset$animal=mouse#
      datasets<-rbind(datasets, dataset)#
      }#
    }#
  }#
}#
#
#Plot the combined data and save out a combined .Rdata file#
quartz#
counts.plot(datasets)
counts.plot(datasets)
filename <- "/Volumes/GoogleDrive/My Drive/Rabies_registration/wholebrain/Composite Data/Th/CompositeData/m2145_composite_plot.pdf"#
quartz.save(filename,type="pdf")
#Load Packages and modified plotting function#
setwd('/Volumes/GoogleDrive/My Drive/Rabies_registration/wholebrain')#
library(wholebrain)#
genotype <- 'Th'#
counts.plot<-function (dataset, device = TRUE, region.lab = "Input region:", xlab= 'Cell count', countThreshold = 10, sorted = TRUE) #
{#
  if(ncol(dataset)<3){#
    counts<-dataset#
  }else{#
    counts <- table(as.character(dataset$acronym), dataset$right.hemisphere)#
  }#
  #counts <- table(as.character(datasets$acronym), datasets$right.hemisphere)#
  maxCounts<-apply(counts, 1, FUN=max)#
  idxKeepRow<- which(maxCounts>countThreshold)#
  counts<-counts[idxKeepRow,]#
  #hemisphere.to.sort <- which.max(colSums(counts*is.finite(counts),na.rm=TRUE ))#
  if (sorted) {#
  counts <- cbind(counts, Total = rowSums(counts))#
  counts <- counts[order(counts[, 3], decreasing = TRUE), ]#
  counts <- counts[,1:2]#
  }#
  #counts <- counts[order(counts[, hemisphere.to.sort], decreasing = TRUE), ]#
  counts <- log10(counts)#
  if (device) {#
    #quartz(width = 7.036585, height = 0.2099039 * nrow(counts))#
    quartz(width = 17.036585, height = 20.2099039)#
  }#
  quartz(width = 7.036585, height = 10.2099039)#
  layout(matrix(c(1, 1, 1, 2, 2, 2, 2), nrow = 1))#
  par(mar = c(4, 2, 4, 2))#
  par(mar=rep(1,4))#
  plot(rep(2.5, nrow(counts)), nrow(counts):1, col = 0, #
       axes = F, ylim = c(0.5, nrow(counts) + 0.5), ylab = "", #
       xlab = "", xlim = c(1, 5))#
  mtext(region.lab, 3, cex = 0.9)#
  for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.1)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(1, 5, 5, 1), c(y.lab - 0.5, y.lab - 0.5, #
                             y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
    text(3, y.lab, name.from.acronym(row.names(counts)[i]), #
         cex = 0.9)#
  }#
  par(xpd = TRUE)#
  legend(3, -0.75, c("Left", "Right"), pch = c(21), pt.bg = c("white", #
                                                              gray(0.2)), title = "Hemisphere:", bg = "white", #
         horiz = TRUE, cex = 1.3, xjust = 0.5)#
  par(xpd = FALSE)#
  par(mar = c(4, 4, 4, 6))#
  zeros <- min(is.finite(counts)) - 1#
  counts[!is.finite(counts)] <- zeros#
  x.range <- ceiling(range(counts[is.finite(counts)]))#
  plot(apply(counts, 1, max), nrow(counts):1 - 0.125, pch = 21, #
       bg = "white", ylim = c(0.5, nrow(counts) + 0.5), #
       xlim = x.range, xlab = "", axes = F, ylab = "", col = 0)#
  for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.05)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(x.range, rev(x.range)), c(y.lab - 0.5, #
                                        y.lab - 0.5, y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
  }#
  log.range <- 10^seq(x.range[1], x.range[2])#
  axis(1, at = seq(x.range[1], x.range[2]), las = 1, labels = c(0, #
                                                                log.range[-1]))#
  axis(3, at = seq(x.range[1], x.range[2]), las = 1, labels = c(0, #
                                                                log.range[-1]))#
  log.range <- unlist(lapply(1:(length(log.range) - 1), #
                             function(x) {#
                               seq(log.range[x], log.range[x + 1], by = log.range[x])#
                             }))#
  axis(1, at = log10(log.range), labels = FALSE)#
  axis(3, at = log10(log.range), labels = FALSE)#
  axis(2, at = nrow(counts):1, labels = row.names(counts), #
       las = 1)#
  axis(4, at = nrow(counts):1, labels = row.names(counts), #
       las = 1)#
  abline(h = 1:nrow(counts), lty = 2, col = "gray")#
  abline(v = log10(log.range), col = "lightblue")#
  lapply(1:nrow(counts), function(x) {#
    lines(counts[x, ], rep(nrow(counts) - x + 1, 2), #
          lwd = 2)#
  })#
  points(counts[, 2], nrow(counts):1, #
         pch = 21, bg = gray(0.2), cex = 1.2)#
  points(counts[, 1], nrow(counts):1, #
         pch = 21, bg = "white", cex = 1.2)#
  box()#
  par(xpd = TRUE)#
  polygon(c(x.range[1] + 0.25, x.range[1] + 0.5, x.range[1] + #
              0.5, x.range[1] + 0.25), c(-2, -2, nrow(counts) + #
                                           3, nrow(counts) + 3), col = "white", border = "white")#
  par(xpd = FALSE)#
  abline(v = c(x.range[1] + 0.25, x.range[1] + 0.5))#
  mtext(xlab, 3, 2.2, cex = 0.8)#
  mtext(xlab, 1, 2.2, cex = 0.8)#
}#
#
#Mouse to analyze#
mouse<-'m2145'#
#
#set animal folder path#
animalFolder<-file.path(getwd(),'BHdata', mouse)#
imageFolders<-list.files(animalFolder, full.names=TRUE)#
#
#Start with the first section#
i = 1#
sectionFolder = imageFolders[i]#
imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
if (length(imageFiles)==1) {#
  load(imageFiles[1])#
  dataset$animal=mouse#
  datasets<-dataset#
} else {#
  df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
  mostRecent<-rownames(df)[which.max(df$mtime)]#
  load(mostRecent)#
  datasets<-dataset#
}#
#Use Rbind to add addictional sections#
for(i in 2:length(imageFolders)){#
  sectionFolder = imageFolders[i]#
  imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
  if (length(imageFiles)>0) {#
    if (length(imageFiles)==1) {#
      if (!grepl("x", imageFiles[1], fixed = TRUE)) {#
        load(imageFiles[1])#
        dataset$animal=mouse#
        datasets<-rbind(datasets, dataset)#
      }#
    } else {#
      if (!grepl("x", imageFiles[1], fixed = TRUE)) {#
      df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
      mostRecent<-rownames(df)[which.max(df$mtime)]#
      load(mostRecent)#
      dataset$animal=mouse#
      datasets<-rbind(datasets, dataset)#
      }#
    }#
  }#
}#
save(datasets, file=file.path(getwd(), 'Composite Data',genotype,paste(genotype, '_compositeData.Rdata',sep = "", collapse=NULL)))#
file=file.path(getwd(), 'Composite Data',genotype,'Composite Data',paste(mouse, '_compositeData.Rdata',sep = "", collapse=NULL))#
#Plot the combined data and save out a combined .Rdata file
#Load Packages and modified plotting function#
setwd('/Volumes/GoogleDrive/My Drive/Rabies_registration/wholebrain')#
library(wholebrain)#
genotype <- 'Th'#
counts.plot<-function (dataset, device = TRUE, region.lab = "Input region:", xlab= 'Cell count', countThreshold = 10, sorted = TRUE) #
{#
  if(ncol(dataset)<3){#
    counts<-dataset#
  }else{#
    counts <- table(as.character(dataset$acronym), dataset$right.hemisphere)#
  }#
  #counts <- table(as.character(datasets$acronym), datasets$right.hemisphere)#
  maxCounts<-apply(counts, 1, FUN=max)#
  idxKeepRow<- which(maxCounts>countThreshold)#
  counts<-counts[idxKeepRow,]#
  #hemisphere.to.sort <- which.max(colSums(counts*is.finite(counts),na.rm=TRUE ))#
  if (sorted) {#
  counts <- cbind(counts, Total = rowSums(counts))#
  counts <- counts[order(counts[, 3], decreasing = TRUE), ]#
  counts <- counts[,1:2]#
  }#
  #counts <- counts[order(counts[, hemisphere.to.sort], decreasing = TRUE), ]#
  counts <- log10(counts)#
  if (device) {#
    #quartz(width = 7.036585, height = 0.2099039 * nrow(counts))#
    quartz(width = 17.036585, height = 20.2099039)#
  }#
  quartz(width = 7.036585, height = 10.2099039)#
  layout(matrix(c(1, 1, 1, 2, 2, 2, 2), nrow = 1))#
  par(mar = c(4, 2, 4, 2))#
  par(mar=rep(1,4))#
  plot(rep(2.5, nrow(counts)), nrow(counts):1, col = 0, #
       axes = F, ylim = c(0.5, nrow(counts) + 0.5), ylab = "", #
       xlab = "", xlim = c(1, 5))#
  mtext(region.lab, 3, cex = 0.9)#
  for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.1)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(1, 5, 5, 1), c(y.lab - 0.5, y.lab - 0.5, #
                             y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
    text(3, y.lab, name.from.acronym(row.names(counts)[i]), #
         cex = 0.9)#
  }#
  par(xpd = TRUE)#
  legend(3, -0.75, c("Left", "Right"), pch = c(21), pt.bg = c("white", #
                                                              gray(0.2)), title = "Hemisphere:", bg = "white", #
         horiz = TRUE, cex = 1.3, xjust = 0.5)#
  par(xpd = FALSE)#
  par(mar = c(4, 4, 4, 6))#
  zeros <- min(is.finite(counts)) - 1#
  counts[!is.finite(counts)] <- zeros#
  x.range <- ceiling(range(counts[is.finite(counts)]))#
  plot(apply(counts, 1, max), nrow(counts):1 - 0.125, pch = 21, #
       bg = "white", ylim = c(0.5, nrow(counts) + 0.5), #
       xlim = x.range, xlab = "", axes = F, ylab = "", col = 0)#
  for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.05)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(x.range, rev(x.range)), c(y.lab - 0.5, #
                                        y.lab - 0.5, y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
  }#
  log.range <- 10^seq(x.range[1], x.range[2])#
  axis(1, at = seq(x.range[1], x.range[2]), las = 1, labels = c(0, #
                                                                log.range[-1]))#
  axis(3, at = seq(x.range[1], x.range[2]), las = 1, labels = c(0, #
                                                                log.range[-1]))#
  log.range <- unlist(lapply(1:(length(log.range) - 1), #
                             function(x) {#
                               seq(log.range[x], log.range[x + 1], by = log.range[x])#
                             }))#
  axis(1, at = log10(log.range), labels = FALSE)#
  axis(3, at = log10(log.range), labels = FALSE)#
  axis(2, at = nrow(counts):1, labels = row.names(counts), #
       las = 1)#
  axis(4, at = nrow(counts):1, labels = row.names(counts), #
       las = 1)#
  abline(h = 1:nrow(counts), lty = 2, col = "gray")#
  abline(v = log10(log.range), col = "lightblue")#
  lapply(1:nrow(counts), function(x) {#
    lines(counts[x, ], rep(nrow(counts) - x + 1, 2), #
          lwd = 2)#
  })#
  points(counts[, 2], nrow(counts):1, #
         pch = 21, bg = gray(0.2), cex = 1.2)#
  points(counts[, 1], nrow(counts):1, #
         pch = 21, bg = "white", cex = 1.2)#
  box()#
  par(xpd = TRUE)#
  polygon(c(x.range[1] + 0.25, x.range[1] + 0.5, x.range[1] + #
              0.5, x.range[1] + 0.25), c(-2, -2, nrow(counts) + #
                                           3, nrow(counts) + 3), col = "white", border = "white")#
  par(xpd = FALSE)#
  abline(v = c(x.range[1] + 0.25, x.range[1] + 0.5))#
  mtext(xlab, 3, 2.2, cex = 0.8)#
  mtext(xlab, 1, 2.2, cex = 0.8)#
}#
#
#Mouse to analyze#
mouse<-'m812'#
#
#set animal folder path#
animalFolder<-file.path(getwd(),'BHdata', mouse)#
imageFolders<-list.files(animalFolder, full.names=TRUE)#
#
#Start with the first section#
i = 1#
sectionFolder = imageFolders[i]#
imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
if (length(imageFiles)==1) {#
  load(imageFiles[1])#
  dataset$animal=mouse#
  datasets<-dataset#
} else {#
  df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
  mostRecent<-rownames(df)[which.max(df$mtime)]#
  load(mostRecent)#
  datasets<-dataset#
}#
#Use Rbind to add addictional sections#
for(i in 2:length(imageFolders)){#
  sectionFolder = imageFolders[i]#
  imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
  if (length(imageFiles)>0) {#
    if (length(imageFiles)==1) {#
      if (!grepl("x", imageFiles[1], fixed = TRUE)) {#
        load(imageFiles[1])#
        dataset$animal=mouse#
        datasets<-rbind(datasets, dataset)#
      }#
    } else {#
      if (!grepl("x", imageFiles[1], fixed = TRUE)) {#
      df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
      mostRecent<-rownames(df)[which.max(df$mtime)]#
      load(mostRecent)#
      dataset$animal=mouse#
      datasets<-rbind(datasets, dataset)#
      }#
    }#
  }#
}#
save(datasets, file=file.path(getwd(), 'Composite Data',genotype,paste(genotype, '_compositeData.Rdata',sep = "", collapse=NULL)))#
file=file.path(getwd(), 'Composite Data',genotype,'Composite Data',paste(mouse, '_compositeData.Rdata',sep = "", collapse=NULL))
#Load Packages and modified plotting function#
setwd('/Volumes/GoogleDrive/My Drive/Rabies_registration/wholebrain')#
library(wholebrain)#
genotype <- 'Th'#
counts.plot<-function (dataset, device = TRUE, region.lab = "Input region:", xlab= 'Cell count', countThreshold = 10, sorted = TRUE) #
{#
  if(ncol(dataset)<3){#
    counts<-dataset#
  }else{#
    counts <- table(as.character(dataset$acronym), dataset$right.hemisphere)#
  }#
  #counts <- table(as.character(datasets$acronym), datasets$right.hemisphere)#
  maxCounts<-apply(counts, 1, FUN=max)#
  idxKeepRow<- which(maxCounts>countThreshold)#
  counts<-counts[idxKeepRow,]#
  #hemisphere.to.sort <- which.max(colSums(counts*is.finite(counts),na.rm=TRUE ))#
  if (sorted) {#
  counts <- cbind(counts, Total = rowSums(counts))#
  counts <- counts[order(counts[, 3], decreasing = TRUE), ]#
  counts <- counts[,1:2]#
  }#
  #counts <- counts[order(counts[, hemisphere.to.sort], decreasing = TRUE), ]#
  counts <- log10(counts)#
  if (device) {#
    #quartz(width = 7.036585, height = 0.2099039 * nrow(counts))#
    quartz(width = 17.036585, height = 20.2099039)#
  }#
  quartz(width = 7.036585, height = 10.2099039)#
  layout(matrix(c(1, 1, 1, 2, 2, 2, 2), nrow = 1))#
  par(mar = c(4, 2, 4, 2))#
  par(mar=rep(1,4))#
  plot(rep(2.5, nrow(counts)), nrow(counts):1, col = 0, #
       axes = F, ylim = c(0.5, nrow(counts) + 0.5), ylab = "", #
       xlab = "", xlim = c(1, 5))#
  mtext(region.lab, 3, cex = 0.9)#
  for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.1)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(1, 5, 5, 1), c(y.lab - 0.5, y.lab - 0.5, #
                             y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
    text(3, y.lab, name.from.acronym(row.names(counts)[i]), #
         cex = 0.9)#
  }#
  par(xpd = TRUE)#
  legend(3, -0.75, c("Left", "Right"), pch = c(21), pt.bg = c("white", #
                                                              gray(0.2)), title = "Hemisphere:", bg = "white", #
         horiz = TRUE, cex = 1.3, xjust = 0.5)#
  par(xpd = FALSE)#
  par(mar = c(4, 4, 4, 6))#
  zeros <- min(is.finite(counts)) - 1#
  counts[!is.finite(counts)] <- zeros#
  x.range <- ceiling(range(counts[is.finite(counts)]))#
  plot(apply(counts, 1, max), nrow(counts):1 - 0.125, pch = 21, #
       bg = "white", ylim = c(0.5, nrow(counts) + 0.5), #
       xlim = x.range, xlab = "", axes = F, ylab = "", col = 0)#
  for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.05)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(x.range, rev(x.range)), c(y.lab - 0.5, #
                                        y.lab - 0.5, y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
  }#
  log.range <- 10^seq(x.range[1], x.range[2])#
  axis(1, at = seq(x.range[1], x.range[2]), las = 1, labels = c(0, #
                                                                log.range[-1]))#
  axis(3, at = seq(x.range[1], x.range[2]), las = 1, labels = c(0, #
                                                                log.range[-1]))#
  log.range <- unlist(lapply(1:(length(log.range) - 1), #
                             function(x) {#
                               seq(log.range[x], log.range[x + 1], by = log.range[x])#
                             }))#
  axis(1, at = log10(log.range), labels = FALSE)#
  axis(3, at = log10(log.range), labels = FALSE)#
  axis(2, at = nrow(counts):1, labels = row.names(counts), #
       las = 1)#
  axis(4, at = nrow(counts):1, labels = row.names(counts), #
       las = 1)#
  abline(h = 1:nrow(counts), lty = 2, col = "gray")#
  abline(v = log10(log.range), col = "lightblue")#
  lapply(1:nrow(counts), function(x) {#
    lines(counts[x, ], rep(nrow(counts) - x + 1, 2), #
          lwd = 2)#
  })#
  points(counts[, 2], nrow(counts):1, #
         pch = 21, bg = gray(0.2), cex = 1.2)#
  points(counts[, 1], nrow(counts):1, #
         pch = 21, bg = "white", cex = 1.2)#
  box()#
  par(xpd = TRUE)#
  polygon(c(x.range[1] + 0.25, x.range[1] + 0.5, x.range[1] + #
              0.5, x.range[1] + 0.25), c(-2, -2, nrow(counts) + #
                                           3, nrow(counts) + 3), col = "white", border = "white")#
  par(xpd = FALSE)#
  abline(v = c(x.range[1] + 0.25, x.range[1] + 0.5))#
  mtext(xlab, 3, 2.2, cex = 0.8)#
  mtext(xlab, 1, 2.2, cex = 0.8)#
}#
#
#Mouse to analyze#
mouse<-'m812'#
#
#set animal folder path#
animalFolder<-file.path(getwd(),'BHdata', mouse)#
imageFolders<-list.files(animalFolder, full.names=TRUE)#
#
#Start with the first section#
i = 1#
sectionFolder = imageFolders[i]#
imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
if (length(imageFiles)==1) {#
  load(imageFiles[1])#
  dataset$animal=mouse#
  datasets<-dataset#
} else {#
  df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
  mostRecent<-rownames(df)[which.max(df$mtime)]#
  load(mostRecent)#
  datasets<-dataset#
}#
#Use Rbind to add addictional sections#
for(i in 2:length(imageFolders)){#
  sectionFolder = imageFolders[i]#
  imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
  if (length(imageFiles)>0) {#
    if (length(imageFiles)==1) {#
      if (!grepl("x", imageFiles[1], fixed = TRUE)) {#
        load(imageFiles[1])#
        dataset$animal=mouse#
        datasets<-rbind(datasets, dataset)#
      }#
    } else {#
      if (!grepl("x", imageFiles[1], fixed = TRUE)) {#
      df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
      mostRecent<-rownames(df)[which.max(df$mtime)]#
      load(mostRecent)#
      dataset$animal=mouse#
      datasets<-rbind(datasets, dataset)#
      }#
    }#
  }#
}#
save(datasets, file=file.path(getwd(), 'Composite Data',genotype,'Composite Data',paste(mouse, '_compositeData.Rdata',sep = "", collapse=NULL)))
#Load Packages and modified plotting function#
setwd('/Volumes/GoogleDrive/My Drive/Rabies_registration/wholebrain')#
library(wholebrain)#
genotype <- 'Th'#
counts.plot<-function (dataset, device = TRUE, region.lab = "Input region:", xlab= 'Cell count', countThreshold = 10, sorted = TRUE) #
{#
  if(ncol(dataset)<3){#
    counts<-dataset#
  }else{#
    counts <- table(as.character(dataset$acronym), dataset$right.hemisphere)#
  }#
  #counts <- table(as.character(datasets$acronym), datasets$right.hemisphere)#
  maxCounts<-apply(counts, 1, FUN=max)#
  idxKeepRow<- which(maxCounts>countThreshold)#
  counts<-counts[idxKeepRow,]#
  #hemisphere.to.sort <- which.max(colSums(counts*is.finite(counts),na.rm=TRUE ))#
  if (sorted) {#
  counts <- cbind(counts, Total = rowSums(counts))#
  counts <- counts[order(counts[, 3], decreasing = TRUE), ]#
  counts <- counts[,1:2]#
  }#
  #counts <- counts[order(counts[, hemisphere.to.sort], decreasing = TRUE), ]#
  counts <- log10(counts)#
  if (device) {#
    #quartz(width = 7.036585, height = 0.2099039 * nrow(counts))#
    quartz(width = 17.036585, height = 20.2099039)#
  }#
  quartz(width = 7.036585, height = 10.2099039)#
  layout(matrix(c(1, 1, 1, 2, 2, 2, 2), nrow = 1))#
  par(mar = c(4, 2, 4, 2))#
  par(mar=rep(1,4))#
  plot(rep(2.5, nrow(counts)), nrow(counts):1, col = 0, #
       axes = F, ylim = c(0.5, nrow(counts) + 0.5), ylab = "", #
       xlab = "", xlim = c(1, 5))#
  mtext(region.lab, 3, cex = 0.9)#
  for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.1)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(1, 5, 5, 1), c(y.lab - 0.5, y.lab - 0.5, #
                             y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
    text(3, y.lab, name.from.acronym(row.names(counts)[i]), #
         cex = 0.9)#
  }#
  par(xpd = TRUE)#
  legend(3, -0.75, c("Left", "Right"), pch = c(21), pt.bg = c("white", #
                                                              gray(0.2)), title = "Hemisphere:", bg = "white", #
         horiz = TRUE, cex = 1.3, xjust = 0.5)#
  par(xpd = FALSE)#
  par(mar = c(4, 4, 4, 6))#
  zeros <- min(is.finite(counts)) - 1#
  counts[!is.finite(counts)] <- zeros#
  x.range <- ceiling(range(counts[is.finite(counts)]))#
  plot(apply(counts, 1, max), nrow(counts):1 - 0.125, pch = 21, #
       bg = "white", ylim = c(0.5, nrow(counts) + 0.5), #
       xlim = x.range, xlab = "", axes = F, ylab = "", col = 0)#
  for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.05)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(x.range, rev(x.range)), c(y.lab - 0.5, #
                                        y.lab - 0.5, y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
  }#
  log.range <- 10^seq(x.range[1], x.range[2])#
  axis(1, at = seq(x.range[1], x.range[2]), las = 1, labels = c(0, #
                                                                log.range[-1]))#
  axis(3, at = seq(x.range[1], x.range[2]), las = 1, labels = c(0, #
                                                                log.range[-1]))#
  log.range <- unlist(lapply(1:(length(log.range) - 1), #
                             function(x) {#
                               seq(log.range[x], log.range[x + 1], by = log.range[x])#
                             }))#
  axis(1, at = log10(log.range), labels = FALSE)#
  axis(3, at = log10(log.range), labels = FALSE)#
  axis(2, at = nrow(counts):1, labels = row.names(counts), #
       las = 1)#
  axis(4, at = nrow(counts):1, labels = row.names(counts), #
       las = 1)#
  abline(h = 1:nrow(counts), lty = 2, col = "gray")#
  abline(v = log10(log.range), col = "lightblue")#
  lapply(1:nrow(counts), function(x) {#
    lines(counts[x, ], rep(nrow(counts) - x + 1, 2), #
          lwd = 2)#
  })#
  points(counts[, 2], nrow(counts):1, #
         pch = 21, bg = gray(0.2), cex = 1.2)#
  points(counts[, 1], nrow(counts):1, #
         pch = 21, bg = "white", cex = 1.2)#
  box()#
  par(xpd = TRUE)#
  polygon(c(x.range[1] + 0.25, x.range[1] + 0.5, x.range[1] + #
              0.5, x.range[1] + 0.25), c(-2, -2, nrow(counts) + #
                                           3, nrow(counts) + 3), col = "white", border = "white")#
  par(xpd = FALSE)#
  abline(v = c(x.range[1] + 0.25, x.range[1] + 0.5))#
  mtext(xlab, 3, 2.2, cex = 0.8)#
  mtext(xlab, 1, 2.2, cex = 0.8)#
}#
#
#Mouse to analyze#
mouse<-'m2145'#
#
#set animal folder path#
animalFolder<-file.path(getwd(),'BHdata', mouse)#
imageFolders<-list.files(animalFolder, full.names=TRUE)#
#
#Start with the first section#
i = 1#
sectionFolder = imageFolders[i]#
imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
if (length(imageFiles)==1) {#
  load(imageFiles[1])#
  dataset$animal=mouse#
  datasets<-dataset#
} else {#
  df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
  mostRecent<-rownames(df)[which.max(df$mtime)]#
  load(mostRecent)#
  datasets<-dataset#
}#
#Use Rbind to add addictional sections#
for(i in 2:length(imageFolders)){#
  sectionFolder = imageFolders[i]#
  imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
  if (length(imageFiles)>0) {#
    if (length(imageFiles)==1) {#
      if (!grepl("x", imageFiles[1], fixed = TRUE)) {#
        load(imageFiles[1])#
        dataset$animal=mouse#
        datasets<-rbind(datasets, dataset)#
      }#
    } else {#
      if (!grepl("x", imageFiles[1], fixed = TRUE)) {#
      df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
      mostRecent<-rownames(df)[which.max(df$mtime)]#
      load(mostRecent)#
      dataset$animal=mouse#
      datasets<-rbind(datasets, dataset)#
      }#
    }#
  }#
}#
save(datasets, file=file.path(getwd(), 'Composite Data',genotype,'Composite Data',paste(mouse, '_compositeData.Rdata',sep = "", collapse=NULL)))
#Mouse to analyze#
mouse<-'m812'#
#
#set animal folder path#
animalFolder<-file.path(getwd(),'BHdata', mouse)#
imageFolders<-list.files(animalFolder, full.names=TRUE)#
#
#Start with the first section#
i = 1#
sectionFolder = imageFolders[i]#
imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
if (length(imageFiles)==1) {#
  load(imageFiles[1])#
  dataset$animal=mouse#
  datasets<-dataset#
} else {#
  df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
  mostRecent<-rownames(df)[which.max(df$mtime)]#
  load(mostRecent)#
  datasets<-dataset#
}#
#Use Rbind to add addictional sections#
for(i in 2:length(imageFolders)){#
  sectionFolder = imageFolders[i]#
  imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
  if (length(imageFiles)>0) {#
    if (length(imageFiles)==1) {#
      if (!grepl("x", imageFiles[1], fixed = TRUE)) {#
        load(imageFiles[1])#
        dataset$animal=mouse#
        datasets<-rbind(datasets, dataset)#
      }#
    } else {#
      if (!grepl("x", imageFiles[1], fixed = TRUE)) {#
      df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
      mostRecent<-rownames(df)[which.max(df$mtime)]#
      load(mostRecent)#
      dataset$animal=mouse#
      datasets<-rbind(datasets, dataset)#
      }#
    }#
  }#
}#
save(datasets, file=file.path(getwd(), 'Composite Data',genotype,'Composite Data',paste(mouse, '_compositeData.Rdata',sep = "", collapse=NULL)))
i = 1#
sectionFolder = imageFolders[i]#
imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
if (length(imageFiles)==1) {#
  load(imageFiles[1])#
  dataset$animal=mouse#
  datasets<-dataset#
} else {#
  df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
  mostRecent<-rownames(df)[which.max(df$mtime)]#
  load(mostRecent)#
  datasets<-dataset#
}
#Use Rbind to add addictional sections#
for(i in 2:length(imageFolders)){#
  sectionFolder = imageFolders[i]#
  imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
  if (length(imageFiles)>0) {#
    if (length(imageFiles)==1) {#
      if (!grepl("x", imageFiles[1], fixed = TRUE)) {#
        load(imageFiles[1])#
        dataset$animal=mouse#
        datasets<-rbind(datasets, dataset)#
      }#
    } else {#
      if (!grepl("x", imageFiles[1], fixed = TRUE)) {#
      df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
      mostRecent<-rownames(df)[which.max(df$mtime)]#
      load(mostRecent)#
      dataset$animal=mouse#
      datasets<-rbind(datasets, dataset)#
      }#
    }#
  }#
}
save(datasets, file=file.path(getwd(), 'Composite Data',genotype,'CompositeData',paste(mouse, '_compositeData.Rdata',sep = "", collapse=NULL)))
#Load Packages and modified plotting function#
setwd('/Volumes/GoogleDrive/My Drive/Rabies_registration/wholebrain')#
library(wholebrain)#
genotype <- 'Th'#
counts.plot<-function (dataset, device = TRUE, region.lab = "Input region:", xlab= 'Cell count', countThreshold = 10, sorted = TRUE) #
{#
  if(ncol(dataset)<3){#
    counts<-dataset#
  }else{#
    counts <- table(as.character(dataset$acronym), dataset$right.hemisphere)#
  }#
  #counts <- table(as.character(datasets$acronym), datasets$right.hemisphere)#
  maxCounts<-apply(counts, 1, FUN=max)#
  idxKeepRow<- which(maxCounts>countThreshold)#
  counts<-counts[idxKeepRow,]#
  #hemisphere.to.sort <- which.max(colSums(counts*is.finite(counts),na.rm=TRUE ))#
  if (sorted) {#
  counts <- cbind(counts, Total = rowSums(counts))#
  counts <- counts[order(counts[, 3], decreasing = TRUE), ]#
  counts <- counts[,1:2]#
  }#
  #counts <- counts[order(counts[, hemisphere.to.sort], decreasing = TRUE), ]#
  counts <- log10(counts)#
  if (device) {#
    #quartz(width = 7.036585, height = 0.2099039 * nrow(counts))#
    quartz(width = 17.036585, height = 20.2099039)#
  }#
  quartz(width = 7.036585, height = 10.2099039)#
  layout(matrix(c(1, 1, 1, 2, 2, 2, 2), nrow = 1))#
  par(mar = c(4, 2, 4, 2))#
  par(mar=rep(1,4))#
  plot(rep(2.5, nrow(counts)), nrow(counts):1, col = 0, #
       axes = F, ylim = c(0.5, nrow(counts) + 0.5), ylab = "", #
       xlab = "", xlim = c(1, 5))#
  mtext(region.lab, 3, cex = 0.9)#
  for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.1)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(1, 5, 5, 1), c(y.lab - 0.5, y.lab - 0.5, #
                             y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
    text(3, y.lab, name.from.acronym(row.names(counts)[i]), #
         cex = 0.9)#
  }#
  par(xpd = TRUE)#
  legend(3, -0.75, c("Left", "Right"), pch = c(21), pt.bg = c("white", #
                                                              gray(0.2)), title = "Hemisphere:", bg = "white", #
         horiz = TRUE, cex = 1.3, xjust = 0.5)#
  par(xpd = FALSE)#
  par(mar = c(4, 4, 4, 6))#
  zeros <- min(is.finite(counts)) - 1#
  counts[!is.finite(counts)] <- zeros#
  x.range <- ceiling(range(counts[is.finite(counts)]))#
  plot(apply(counts, 1, max), nrow(counts):1 - 0.125, pch = 21, #
       bg = "white", ylim = c(0.5, nrow(counts) + 0.5), #
       xlim = x.range, xlab = "", axes = F, ylab = "", col = 0)#
  for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.05)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(x.range, rev(x.range)), c(y.lab - 0.5, #
                                        y.lab - 0.5, y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
  }#
  log.range <- 10^seq(x.range[1], x.range[2])#
  axis(1, at = seq(x.range[1], x.range[2]), las = 1, labels = c(0, #
                                                                log.range[-1]))#
  axis(3, at = seq(x.range[1], x.range[2]), las = 1, labels = c(0, #
                                                                log.range[-1]))#
  log.range <- unlist(lapply(1:(length(log.range) - 1), #
                             function(x) {#
                               seq(log.range[x], log.range[x + 1], by = log.range[x])#
                             }))#
  axis(1, at = log10(log.range), labels = FALSE)#
  axis(3, at = log10(log.range), labels = FALSE)#
  axis(2, at = nrow(counts):1, labels = row.names(counts), #
       las = 1)#
  axis(4, at = nrow(counts):1, labels = row.names(counts), #
       las = 1)#
  abline(h = 1:nrow(counts), lty = 2, col = "gray")#
  abline(v = log10(log.range), col = "lightblue")#
  lapply(1:nrow(counts), function(x) {#
    lines(counts[x, ], rep(nrow(counts) - x + 1, 2), #
          lwd = 2)#
  })#
  points(counts[, 2], nrow(counts):1, #
         pch = 21, bg = gray(0.2), cex = 1.2)#
  points(counts[, 1], nrow(counts):1, #
         pch = 21, bg = "white", cex = 1.2)#
  box()#
  par(xpd = TRUE)#
  polygon(c(x.range[1] + 0.25, x.range[1] + 0.5, x.range[1] + #
              0.5, x.range[1] + 0.25), c(-2, -2, nrow(counts) + #
                                           3, nrow(counts) + 3), col = "white", border = "white")#
  par(xpd = FALSE)#
  abline(v = c(x.range[1] + 0.25, x.range[1] + 0.5))#
  mtext(xlab, 3, 2.2, cex = 0.8)#
  mtext(xlab, 1, 2.2, cex = 0.8)#
}#
#
#Mouse to analyze#
mouse<-'m2145'#
#
#set animal folder path#
animalFolder<-file.path(getwd(),'BHdata', mouse)#
imageFolders<-list.files(animalFolder, full.names=TRUE)#
#
#Start with the first section#
i = 1#
sectionFolder = imageFolders[i]#
imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
if (length(imageFiles)==1) {#
  load(imageFiles[1])#
  dataset$animal=mouse#
  datasets<-dataset#
} else {#
  df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
  mostRecent<-rownames(df)[which.max(df$mtime)]#
  load(mostRecent)#
  datasets<-dataset#
}#
#Use Rbind to add addictional sections#
for(i in 2:length(imageFolders)){#
  sectionFolder = imageFolders[i]#
  imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
  if (length(imageFiles)>0) {#
    if (length(imageFiles)==1) {#
      if (!grepl("x", imageFiles[1], fixed = TRUE)) {#
        load(imageFiles[1])#
        dataset$animal=mouse#
        datasets<-rbind(datasets, dataset)#
      }#
    } else {#
      if (!grepl("x", imageFiles[1], fixed = TRUE)) {#
      df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
      mostRecent<-rownames(df)[which.max(df$mtime)]#
      load(mostRecent)#
      dataset$animal=mouse#
      datasets<-rbind(datasets, dataset)#
      }#
    }#
  }#
}#
save(datasets, file=file.path(getwd(), 'Composite Data',genotype,'CompositeData',paste(mouse, '_compositeData.Rdata',sep = "", collapse=NULL)))
genotype <- 'Tac1-PVT'#
counts.plot<-function (dataset, device = TRUE, region.lab = "Input region:", xlab= 'Cell count', countThreshold = 10, sorted = TRUE) #
{#
  if(ncol(dataset)<3){#
    counts<-dataset#
  }else{#
    counts <- table(as.character(dataset$acronym), dataset$right.hemisphere)#
  }#
  #counts <- table(as.character(datasets$acronym), datasets$right.hemisphere)#
  maxCounts<-apply(counts, 1, FUN=max)#
  idxKeepRow<- which(maxCounts>countThreshold)#
  counts<-counts[idxKeepRow,]#
  #hemisphere.to.sort <- which.max(colSums(counts*is.finite(counts),na.rm=TRUE ))#
  if (sorted) {#
  counts <- cbind(counts, Total = rowSums(counts))#
  counts <- counts[order(counts[, 3], decreasing = TRUE), ]#
  counts <- counts[,1:2]#
  }#
  #counts <- counts[order(counts[, hemisphere.to.sort], decreasing = TRUE), ]#
  counts <- log10(counts)#
  if (device) {#
    #quartz(width = 7.036585, height = 0.2099039 * nrow(counts))#
    quartz(width = 17.036585, height = 20.2099039)#
  }#
  quartz(width = 7.036585, height = 10.2099039)#
  layout(matrix(c(1, 1, 1, 2, 2, 2, 2), nrow = 1))#
  par(mar = c(4, 2, 4, 2))#
  par(mar=rep(1,4))#
  plot(rep(2.5, nrow(counts)), nrow(counts):1, col = 0, #
       axes = F, ylim = c(0.5, nrow(counts) + 0.5), ylab = "", #
       xlab = "", xlim = c(1, 5))#
  mtext(region.lab, 3, cex = 0.9)#
  for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.1)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(1, 5, 5, 1), c(y.lab - 0.5, y.lab - 0.5, #
                             y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
    text(3, y.lab, name.from.acronym(row.names(counts)[i]), #
         cex = 0.9)#
  }#
  par(xpd = TRUE)#
  legend(3, -0.75, c("Left", "Right"), pch = c(21), pt.bg = c("white", #
                                                              gray(0.2)), title = "Hemisphere:", bg = "white", #
         horiz = TRUE, cex = 1.3, xjust = 0.5)#
  par(xpd = FALSE)#
  par(mar = c(4, 4, 4, 6))#
  zeros <- min(is.finite(counts)) - 1#
  counts[!is.finite(counts)] <- zeros#
  x.range <- ceiling(range(counts[is.finite(counts)]))#
  plot(apply(counts, 1, max), nrow(counts):1 - 0.125, pch = 21, #
       bg = "white", ylim = c(0.5, nrow(counts) + 0.5), #
       xlim = x.range, xlab = "", axes = F, ylab = "", col = 0)#
  for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.05)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(x.range, rev(x.range)), c(y.lab - 0.5, #
                                        y.lab - 0.5, y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
  }#
  log.range <- 10^seq(x.range[1], x.range[2])#
  axis(1, at = seq(x.range[1], x.range[2]), las = 1, labels = c(0, #
                                                                log.range[-1]))#
  axis(3, at = seq(x.range[1], x.range[2]), las = 1, labels = c(0, #
                                                                log.range[-1]))#
  log.range <- unlist(lapply(1:(length(log.range) - 1), #
                             function(x) {#
                               seq(log.range[x], log.range[x + 1], by = log.range[x])#
                             }))#
  axis(1, at = log10(log.range), labels = FALSE)#
  axis(3, at = log10(log.range), labels = FALSE)#
  axis(2, at = nrow(counts):1, labels = row.names(counts), #
       las = 1)#
  axis(4, at = nrow(counts):1, labels = row.names(counts), #
       las = 1)#
  abline(h = 1:nrow(counts), lty = 2, col = "gray")#
  abline(v = log10(log.range), col = "lightblue")#
  lapply(1:nrow(counts), function(x) {#
    lines(counts[x, ], rep(nrow(counts) - x + 1, 2), #
          lwd = 2)#
  })#
  points(counts[, 2], nrow(counts):1, #
         pch = 21, bg = gray(0.2), cex = 1.2)#
  points(counts[, 1], nrow(counts):1, #
         pch = 21, bg = "white", cex = 1.2)#
  box()#
  par(xpd = TRUE)#
  polygon(c(x.range[1] + 0.25, x.range[1] + 0.5, x.range[1] + #
              0.5, x.range[1] + 0.25), c(-2, -2, nrow(counts) + #
                                           3, nrow(counts) + 3), col = "white", border = "white")#
  par(xpd = FALSE)#
  abline(v = c(x.range[1] + 0.25, x.range[1] + 0.5))#
  mtext(xlab, 3, 2.2, cex = 0.8)#
  mtext(xlab, 1, 2.2, cex = 0.8)#
}#
#
#Mouse to analyze#
mouse<-'m1058'#
#
#set animal folder path#
animalFolder<-file.path(getwd(),'BHdata', mouse)#
imageFolders<-list.files(animalFolder, full.names=TRUE)#
#
#Start with the first section#
i = 1#
sectionFolder = imageFolders[i]#
imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
if (length(imageFiles)==1) {#
  load(imageFiles[1])#
  dataset$animal=mouse#
  datasets<-dataset#
} else {#
  df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
  mostRecent<-rownames(df)[which.max(df$mtime)]#
  load(mostRecent)#
  datasets<-dataset#
}#
#Use Rbind to add addictional sections#
for(i in 2:length(imageFolders)){#
  sectionFolder = imageFolders[i]#
  imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
  if (length(imageFiles)>0) {#
    if (length(imageFiles)==1) {#
      if (!grepl("x", imageFiles[1], fixed = TRUE)) {#
        load(imageFiles[1])#
        dataset$animal=mouse#
        datasets<-rbind(datasets, dataset)#
      }#
    } else {#
      if (!grepl("x", imageFiles[1], fixed = TRUE)) {#
      df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
      mostRecent<-rownames(df)[which.max(df$mtime)]#
      load(mostRecent)#
      dataset$animal=mouse#
      datasets<-rbind(datasets, dataset)#
      }#
    }#
  }#
}#
save(datasets, file=file.path(getwd(), 'Composite Data',genotype,'CompositeData',paste(mouse, '_compositeData.Rdata',sep = "", collapse=NULL)))#
#
#Plot the combined data and save out a combined .Rdata file#
quartz#
counts.plot(datasets)#
filename <- file.path(getwd(), 'Composite Data',genotype,'CompositeData',paste(mouse, '_composite_plot.pdf',sep = "", collapse=NULL))#
quartz.save(filename,type="pdf")
#Mouse to analyze#
mouse<-'m1080'#
#
#set animal folder path#
animalFolder<-file.path(getwd(),'BHdata', mouse)#
imageFolders<-list.files(animalFolder, full.names=TRUE)#
#
#Start with the first section#
i = 1#
sectionFolder = imageFolders[i]#
imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
if (length(imageFiles)==1) {#
  load(imageFiles[1])#
  dataset$animal=mouse#
  datasets<-dataset#
} else {#
  df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
  mostRecent<-rownames(df)[which.max(df$mtime)]#
  load(mostRecent)#
  datasets<-dataset#
}#
#Use Rbind to add addictional sections#
for(i in 2:length(imageFolders)){#
  sectionFolder = imageFolders[i]#
  imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
  if (length(imageFiles)>0) {#
    if (length(imageFiles)==1) {#
      if (!grepl("x", imageFiles[1], fixed = TRUE)) {#
        load(imageFiles[1])#
        dataset$animal=mouse#
        datasets<-rbind(datasets, dataset)#
      }#
    } else {#
      if (!grepl("x", imageFiles[1], fixed = TRUE)) {#
      df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
      mostRecent<-rownames(df)[which.max(df$mtime)]#
      load(mostRecent)#
      dataset$animal=mouse#
      datasets<-rbind(datasets, dataset)#
      }#
    }#
  }#
}#
save(datasets, file=file.path(getwd(), 'Composite Data',genotype,'CompositeData',paste(mouse, '_compositeData.Rdata',sep = "", collapse=NULL)))#
#
#Plot the combined data and save out a combined .Rdata file#
quartz#
counts.plot(datasets)#
filename <- file.path(getwd(), 'Composite Data',genotype,'CompositeData',paste(mouse, '_composite_plot.pdf',sep = "", collapse=NULL))#
quartz.save(filename,type="pdf")
genotype <- 'Tac1'#
counts.plot<-function (dataset, device = TRUE, region.lab = "Input region:", xlab= 'Cell count', countThreshold = 10, sorted = TRUE) #
{#
  if(ncol(dataset)<3){#
    counts<-dataset#
  }else{#
    counts <- table(as.character(dataset$acronym), dataset$right.hemisphere)#
  }#
  #counts <- table(as.character(datasets$acronym), datasets$right.hemisphere)#
  maxCounts<-apply(counts, 1, FUN=max)#
  idxKeepRow<- which(maxCounts>countThreshold)#
  counts<-counts[idxKeepRow,]#
  #hemisphere.to.sort <- which.max(colSums(counts*is.finite(counts),na.rm=TRUE ))#
  if (sorted) {#
  counts <- cbind(counts, Total = rowSums(counts))#
  counts <- counts[order(counts[, 3], decreasing = TRUE), ]#
  counts <- counts[,1:2]#
  }#
  #counts <- counts[order(counts[, hemisphere.to.sort], decreasing = TRUE), ]#
  counts <- log10(counts)#
  if (device) {#
    #quartz(width = 7.036585, height = 0.2099039 * nrow(counts))#
    quartz(width = 17.036585, height = 20.2099039)#
  }#
  quartz(width = 7.036585, height = 10.2099039)#
  layout(matrix(c(1, 1, 1, 2, 2, 2, 2), nrow = 1))#
  par(mar = c(4, 2, 4, 2))#
  par(mar=rep(1,4))#
  plot(rep(2.5, nrow(counts)), nrow(counts):1, col = 0, #
       axes = F, ylim = c(0.5, nrow(counts) + 0.5), ylab = "", #
       xlab = "", xlim = c(1, 5))#
  mtext(region.lab, 3, cex = 0.9)#
  for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.1)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(1, 5, 5, 1), c(y.lab - 0.5, y.lab - 0.5, #
                             y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
    text(3, y.lab, name.from.acronym(row.names(counts)[i]), #
         cex = 0.9)#
  }#
  par(xpd = TRUE)#
  legend(3, -0.75, c("Left", "Right"), pch = c(21), pt.bg = c("white", #
                                                              gray(0.2)), title = "Hemisphere:", bg = "white", #
         horiz = TRUE, cex = 1.3, xjust = 0.5)#
  par(xpd = FALSE)#
  par(mar = c(4, 4, 4, 6))#
  zeros <- min(is.finite(counts)) - 1#
  counts[!is.finite(counts)] <- zeros#
  x.range <- ceiling(range(counts[is.finite(counts)]))#
  plot(apply(counts, 1, max), nrow(counts):1 - 0.125, pch = 21, #
       bg = "white", ylim = c(0.5, nrow(counts) + 0.5), #
       xlim = x.range, xlab = "", axes = F, ylab = "", col = 0)#
  for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.05)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(x.range, rev(x.range)), c(y.lab - 0.5, #
                                        y.lab - 0.5, y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
  }#
  log.range <- 10^seq(x.range[1], x.range[2])#
  axis(1, at = seq(x.range[1], x.range[2]), las = 1, labels = c(0, #
                                                                log.range[-1]))#
  axis(3, at = seq(x.range[1], x.range[2]), las = 1, labels = c(0, #
                                                                log.range[-1]))#
  log.range <- unlist(lapply(1:(length(log.range) - 1), #
                             function(x) {#
                               seq(log.range[x], log.range[x + 1], by = log.range[x])#
                             }))#
  axis(1, at = log10(log.range), labels = FALSE)#
  axis(3, at = log10(log.range), labels = FALSE)#
  axis(2, at = nrow(counts):1, labels = row.names(counts), #
       las = 1)#
  axis(4, at = nrow(counts):1, labels = row.names(counts), #
       las = 1)#
  abline(h = 1:nrow(counts), lty = 2, col = "gray")#
  abline(v = log10(log.range), col = "lightblue")#
  lapply(1:nrow(counts), function(x) {#
    lines(counts[x, ], rep(nrow(counts) - x + 1, 2), #
          lwd = 2)#
  })#
  points(counts[, 2], nrow(counts):1, #
         pch = 21, bg = gray(0.2), cex = 1.2)#
  points(counts[, 1], nrow(counts):1, #
         pch = 21, bg = "white", cex = 1.2)#
  box()#
  par(xpd = TRUE)#
  polygon(c(x.range[1] + 0.25, x.range[1] + 0.5, x.range[1] + #
              0.5, x.range[1] + 0.25), c(-2, -2, nrow(counts) + #
                                           3, nrow(counts) + 3), col = "white", border = "white")#
  par(xpd = FALSE)#
  abline(v = c(x.range[1] + 0.25, x.range[1] + 0.5))#
  mtext(xlab, 3, 2.2, cex = 0.8)#
  mtext(xlab, 1, 2.2, cex = 0.8)#
}#
#
#Mouse to analyze#
mouse<-'m1060'#
#
#set animal folder path#
animalFolder<-file.path(getwd(),'BHdata', mouse)#
imageFolders<-list.files(animalFolder, full.names=TRUE)#
#
#Start with the first section#
i = 1#
sectionFolder = imageFolders[i]#
imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
if (length(imageFiles)==1) {#
  load(imageFiles[1])#
  dataset$animal=mouse#
  datasets<-dataset#
} else {#
  df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
  mostRecent<-rownames(df)[which.max(df$mtime)]#
  load(mostRecent)#
  datasets<-dataset#
}#
#Use Rbind to add addictional sections#
for(i in 2:length(imageFolders)){#
  sectionFolder = imageFolders[i]#
  imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
  if (length(imageFiles)>0) {#
    if (length(imageFiles)==1) {#
      if (!grepl("x", imageFiles[1], fixed = TRUE)) {#
        load(imageFiles[1])#
        dataset$animal=mouse#
        datasets<-rbind(datasets, dataset)#
      }#
    } else {#
      if (!grepl("x", imageFiles[1], fixed = TRUE)) {#
      df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
      mostRecent<-rownames(df)[which.max(df$mtime)]#
      load(mostRecent)#
      dataset$animal=mouse#
      datasets<-rbind(datasets, dataset)#
      }#
    }#
  }#
}#
save(datasets, file=file.path(getwd(), 'Composite Data',genotype,'CompositeData',paste(mouse, '_compositeData.Rdata',sep = "", collapse=NULL)))#
#
#Plot the combined data and save out a combined .Rdata file#
quartz#
counts.plot(datasets)#
filename <- file.path(getwd(), 'Composite Data',genotype,'CompositeData',paste(mouse, '_composite_plot.pdf',sep = "", collapse=NULL))#
quartz.save(filename,type="pdf")
#Mouse to analyze#
mouse<-'m1062'#
#
#set animal folder path#
animalFolder<-file.path(getwd(),'BHdata', mouse)#
imageFolders<-list.files(animalFolder, full.names=TRUE)#
#
#Start with the first section#
i = 1#
sectionFolder = imageFolders[i]#
imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
if (length(imageFiles)==1) {#
  load(imageFiles[1])#
  dataset$animal=mouse#
  datasets<-dataset#
} else {#
  df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
  mostRecent<-rownames(df)[which.max(df$mtime)]#
  load(mostRecent)#
  datasets<-dataset#
}#
#Use Rbind to add addictional sections#
for(i in 2:length(imageFolders)){#
  sectionFolder = imageFolders[i]#
  imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
  if (length(imageFiles)>0) {#
    if (length(imageFiles)==1) {#
      if (!grepl("x", imageFiles[1], fixed = TRUE)) {#
        load(imageFiles[1])#
        dataset$animal=mouse#
        datasets<-rbind(datasets, dataset)#
      }#
    } else {#
      if (!grepl("x", imageFiles[1], fixed = TRUE)) {#
      df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
      mostRecent<-rownames(df)[which.max(df$mtime)]#
      load(mostRecent)#
      dataset$animal=mouse#
      datasets<-rbind(datasets, dataset)#
      }#
    }#
  }#
}#
save(datasets, file=file.path(getwd(), 'Composite Data',genotype,'CompositeData',paste(mouse, '_compositeData.Rdata',sep = "", collapse=NULL)))#
#
#Plot the combined data and save out a combined .Rdata file#
quartz#
counts.plot(datasets)#
filename <- file.path(getwd(), 'Composite Data',genotype,'CompositeData',paste(mouse, '_composite_plot.pdf',sep = "", collapse=NULL))#
quartz.save(filename,type="pdf")
#Mouse to analyze#
mouse<-'m1083'#
#
#set animal folder path#
animalFolder<-file.path(getwd(),'BHdata', mouse)#
imageFolders<-list.files(animalFolder, full.names=TRUE)#
#
#Start with the first section#
i = 1#
sectionFolder = imageFolders[i]#
imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
if (length(imageFiles)==1) {#
  load(imageFiles[1])#
  dataset$animal=mouse#
  datasets<-dataset#
} else {#
  df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
  mostRecent<-rownames(df)[which.max(df$mtime)]#
  load(mostRecent)#
  datasets<-dataset#
}#
#Use Rbind to add addictional sections#
for(i in 2:length(imageFolders)){#
  sectionFolder = imageFolders[i]#
  imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
  if (length(imageFiles)>0) {#
    if (length(imageFiles)==1) {#
      if (!grepl("x", imageFiles[1], fixed = TRUE)) {#
        load(imageFiles[1])#
        dataset$animal=mouse#
        datasets<-rbind(datasets, dataset)#
      }#
    } else {#
      if (!grepl("x", imageFiles[1], fixed = TRUE)) {#
      df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
      mostRecent<-rownames(df)[which.max(df$mtime)]#
      load(mostRecent)#
      dataset$animal=mouse#
      datasets<-rbind(datasets, dataset)#
      }#
    }#
  }#
}#
save(datasets, file=file.path(getwd(), 'Composite Data',genotype,'CompositeData',paste(mouse, '_compositeData.Rdata',sep = "", collapse=NULL)))#
#
#Plot the combined data and save out a combined .Rdata file#
quartz#
counts.plot(datasets)#
filename <- file.path(getwd(), 'Composite Data',genotype,'CompositeData',paste(mouse, '_composite_plot.pdf',sep = "", collapse=NULL))#
quartz.save(filename,type="pdf")
genotype <- 'Calb1'#
counts.plot<-function (dataset, device = TRUE, region.lab = "Input region:", xlab= 'Cell count', countThreshold = 10, sorted = TRUE) #
{#
  if(ncol(dataset)<3){#
    counts<-dataset#
  }else{#
    counts <- table(as.character(dataset$acronym), dataset$right.hemisphere)#
  }#
  #counts <- table(as.character(datasets$acronym), datasets$right.hemisphere)#
  maxCounts<-apply(counts, 1, FUN=max)#
  idxKeepRow<- which(maxCounts>countThreshold)#
  counts<-counts[idxKeepRow,]#
  #hemisphere.to.sort <- which.max(colSums(counts*is.finite(counts),na.rm=TRUE ))#
  if (sorted) {#
  counts <- cbind(counts, Total = rowSums(counts))#
  counts <- counts[order(counts[, 3], decreasing = TRUE), ]#
  counts <- counts[,1:2]#
  }#
  #counts <- counts[order(counts[, hemisphere.to.sort], decreasing = TRUE), ]#
  counts <- log10(counts)#
  if (device) {#
    #quartz(width = 7.036585, height = 0.2099039 * nrow(counts))#
    quartz(width = 17.036585, height = 20.2099039)#
  }#
  quartz(width = 7.036585, height = 10.2099039)#
  layout(matrix(c(1, 1, 1, 2, 2, 2, 2), nrow = 1))#
  par(mar = c(4, 2, 4, 2))#
  par(mar=rep(1,4))#
  plot(rep(2.5, nrow(counts)), nrow(counts):1, col = 0, #
       axes = F, ylim = c(0.5, nrow(counts) + 0.5), ylab = "", #
       xlab = "", xlim = c(1, 5))#
  mtext(region.lab, 3, cex = 0.9)#
  for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.1)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(1, 5, 5, 1), c(y.lab - 0.5, y.lab - 0.5, #
                             y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
    text(3, y.lab, name.from.acronym(row.names(counts)[i]), #
         cex = 0.9)#
  }#
  par(xpd = TRUE)#
  legend(3, -0.75, c("Left", "Right"), pch = c(21), pt.bg = c("white", #
                                                              gray(0.2)), title = "Hemisphere:", bg = "white", #
         horiz = TRUE, cex = 1.3, xjust = 0.5)#
  par(xpd = FALSE)#
  par(mar = c(4, 4, 4, 6))#
  zeros <- min(is.finite(counts)) - 1#
  counts[!is.finite(counts)] <- zeros#
  x.range <- ceiling(range(counts[is.finite(counts)]))#
  plot(apply(counts, 1, max), nrow(counts):1 - 0.125, pch = 21, #
       bg = "white", ylim = c(0.5, nrow(counts) + 0.5), #
       xlim = x.range, xlab = "", axes = F, ylab = "", col = 0)#
  for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.05)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(x.range, rev(x.range)), c(y.lab - 0.5, #
                                        y.lab - 0.5, y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
  }#
  log.range <- 10^seq(x.range[1], x.range[2])#
  axis(1, at = seq(x.range[1], x.range[2]), las = 1, labels = c(0, #
                                                                log.range[-1]))#
  axis(3, at = seq(x.range[1], x.range[2]), las = 1, labels = c(0, #
                                                                log.range[-1]))#
  log.range <- unlist(lapply(1:(length(log.range) - 1), #
                             function(x) {#
                               seq(log.range[x], log.range[x + 1], by = log.range[x])#
                             }))#
  axis(1, at = log10(log.range), labels = FALSE)#
  axis(3, at = log10(log.range), labels = FALSE)#
  axis(2, at = nrow(counts):1, labels = row.names(counts), #
       las = 1)#
  axis(4, at = nrow(counts):1, labels = row.names(counts), #
       las = 1)#
  abline(h = 1:nrow(counts), lty = 2, col = "gray")#
  abline(v = log10(log.range), col = "lightblue")#
  lapply(1:nrow(counts), function(x) {#
    lines(counts[x, ], rep(nrow(counts) - x + 1, 2), #
          lwd = 2)#
  })#
  points(counts[, 2], nrow(counts):1, #
         pch = 21, bg = gray(0.2), cex = 1.2)#
  points(counts[, 1], nrow(counts):1, #
         pch = 21, bg = "white", cex = 1.2)#
  box()#
  par(xpd = TRUE)#
  polygon(c(x.range[1] + 0.25, x.range[1] + 0.5, x.range[1] + #
              0.5, x.range[1] + 0.25), c(-2, -2, nrow(counts) + #
                                           3, nrow(counts) + 3), col = "white", border = "white")#
  par(xpd = FALSE)#
  abline(v = c(x.range[1] + 0.25, x.range[1] + 0.5))#
  mtext(xlab, 3, 2.2, cex = 0.8)#
  mtext(xlab, 1, 2.2, cex = 0.8)#
}#
#
#Mouse to analyze#
mouse<-'m3783'#
#
#set animal folder path#
animalFolder<-file.path(getwd(),'BHdata', mouse)#
imageFolders<-list.files(animalFolder, full.names=TRUE)#
#
#Start with the first section#
i = 1#
sectionFolder = imageFolders[i]#
imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
if (length(imageFiles)==1) {#
  load(imageFiles[1])#
  dataset$animal=mouse#
  datasets<-dataset#
} else {#
  df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
  mostRecent<-rownames(df)[which.max(df$mtime)]#
  load(mostRecent)#
  datasets<-dataset#
}#
#Use Rbind to add addictional sections#
for(i in 2:length(imageFolders)){#
  sectionFolder = imageFolders[i]#
  imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
  if (length(imageFiles)>0) {#
    if (length(imageFiles)==1) {#
      if (!grepl("x", imageFiles[1], fixed = TRUE)) {#
        load(imageFiles[1])#
        dataset$animal=mouse#
        datasets<-rbind(datasets, dataset)#
      }#
    } else {#
      if (!grepl("x", imageFiles[1], fixed = TRUE)) {#
      df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
      mostRecent<-rownames(df)[which.max(df$mtime)]#
      load(mostRecent)#
      dataset$animal=mouse#
      datasets<-rbind(datasets, dataset)#
      }#
    }#
  }#
}#
save(datasets, file=file.path(getwd(), 'Composite Data',genotype,'CompositeData',paste(mouse, '_compositeData.Rdata',sep = "", collapse=NULL)))#
#
#Plot the combined data and save out a combined .Rdata file#
quartz#
counts.plot(datasets)#
filename <- file.path(getwd(), 'Composite Data',genotype,'CompositeData',paste(mouse, '_composite_plot.pdf',sep = "", collapse=NULL))#
quartz.save(filename,type="pdf")
#Load Packages and modified plotting function#
library(wholebrain)#
genotype <- 'Th'#
#set path for data combined by animal#
combindedAnimalFolder<- file.path(getwd(),'Composite Data',genotype,'CompositeData')#
mouseFiles<-list.files(combindedAnimalFolder, full.names=TRUE, pattern = "\\.Rdata$")#
#
#Start with the first section#
i = 1#
firstMouse = mouseFiles[i]#
if (length(firstMouse)==1) {#
  load(firstMouse[1])#
  Genotype_datasets<-datasets#
}#
#
#Use Rbind to add addictional sections#
for(i in 2:length(mouseFiles)){#
    load(mouseFiles[1])#
    Genotype_datasets <-rbind(Genotype_datasets, datasets)#
}#
#
#Plot the combined data and save out a combined .Rdata file#
counts.plot(Genotype_datasets)
filename <- file.path(getwd(),'Composite Data',genotype,paste(genotype, '_composite_plot.pdf',sep = "", collapse=NULL))#
quartz.save(filename,type="pdf")#
save(Genotype_datasets, file=file.path(getwd(), 'Composite Data',genotype,paste(genotype, '_compositeData.Rdata',sep = "", collapse=NULL)))
counts.plot(Genotype_datasets)#
filename <- file.path(getwd(),'Composite Data',genotype,paste(genotype, '_composite_plot.pdf',sep = "", collapse=NULL))#
quartz.save(filename,type="pdf")#
save(Genotype_datasets, file=file.path(getwd(), 'Composite Data',genotype,paste(genotype, '_compositeData.Rdata',sep = "", collapse=NULL)))
source(file.path(getwd(),"counts.cohort.plot.R"))#
counts.cohort.plot<-function (dataset, device = TRUE, region.lab = "Input region:", xlab= 'Cell count') #
{#
  if(ncol(dataset)<3){#
    counts<-dataset#
  }else{#
    genotypeLabes<- matrix(rep(genotype,1),3)#
    counts <- table(as.character(dataset$acronym), dataset$right.hemisphere)#
    z <- length(dataset$right.hemisphere)#
    genotypeLabels<- matrix(rep(genotype,1),z)#
    counts <- table(as.character(dataset$acronym), genotypeLabels)#
  }#
  maxCounts<-apply(counts, 1, FUN=max)#
  idxKeepRow<- which(maxCounts>0)#
  counts<-counts[idxKeepRow,]#
  hemisphere.to.sort <- which.max(colSums(counts*is.finite(counts),na.rm=TRUE ))#
  counts <- counts[order(counts[, hemisphere.to.sort], decreasing = TRUE), ]#
  counts <- log10(counts)#
  if (device) {#
    #quartz(width = 7.036585, height = 0.2099039 * nrow(counts))#
    quartz(width = 17.036585, height = 20.2099039)#
  }#
  quartz(width = 7.036585, height = 10.2099039)#
  layout(matrix(c(1, 1, 1, 2, 2, 2, 2), nrow = 1))#
  par(mar = c(4, 2, 4, 2))#
  par(mar=rep(1,4))#
  plot(rep(2.5, nrow(counts)), nrow(counts):1, col = 0, #
       axes = F, ylim = c(0.5, nrow(counts) + 0.5), ylab = "", #
       xlab = "", xlim = c(1, 5))#
  mtext(region.lab, 3, cex = 0.9)#
  for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.1)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(1, 5, 5, 1), c(y.lab - 0.5, y.lab - 0.5, #
                             y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
    text(3, y.lab, name.from.acronym(row.names(counts)[i]), #
         cex = 0.9)#
  }#
  par(xpd = TRUE)#
  legend(3, -0.75, c("Left", "Right"), pch = c(21), pt.bg = c("white", #
                                                              gray(0.2)), title = "Hemisphere:", bg = "white", #
         horiz = TRUE, cex = 1.3, xjust = 0.5)#
  par(xpd = FALSE)#
  par(mar = c(4, 4, 4, 6))#
  zeros <- min(is.finite(counts)) - 1#
  counts[!is.finite(counts)] <- zeros#
  x.range <- ceiling(range(counts[is.finite(counts)]))#
  plot(apply(counts, 1, max), nrow(counts):1 - 0.125, pch = 21, #
       bg = "white", ylim = c(0.5, nrow(counts) + 0.5), #
       xlim = x.range, xlab = "", axes = F, ylab = "", col = 0)#
  for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.05)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(x.range, rev(x.range)), c(y.lab - 0.5, #
                                        y.lab - 0.5, y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
  }#
  log.range <- 10^seq(x.range[1], x.range[2])#
  axis(1, at = seq(x.range[1], x.range[2]), las = 1, labels = c(0, #
                                                                log.range[-1]))#
  axis(3, at = seq(x.range[1], x.range[2]), las = 1, labels = c(0, #
                                                                log.range[-1]))#
  log.range <- unlist(lapply(1:(length(log.range) - 1), #
                             function(x) {#
                               seq(log.range[x], log.range[x + 1], by = log.range[x])#
                             }))#
  axis(1, at = log10(log.range), labels = FALSE)#
  axis(3, at = log10(log.range), labels = FALSE)#
  axis(2, at = nrow(counts):1, labels = row.names(counts), #
       las = 1)#
  axis(4, at = nrow(counts):1, labels = row.names(counts), #
       las = 1)#
  abline(h = 1:nrow(counts), lty = 2, col = "gray")#
  abline(v = log10(log.range), col = "lightblue")#
  lapply(1:nrow(counts), function(x) {#
    lines(counts[x, ], rep(nrow(counts) - x + 1, 2), #
          lwd = 2)#
  })#
  points(counts[, 2], nrow(counts):1, #
         pch = 21, bg = gray(0.2), cex = 1.2)#
  points(counts[, 1], nrow(counts):1, #
         pch = 21, bg = "white", cex = 1.2)#
  box()#
  par(xpd = TRUE)#
  #polygon(c(x.range[1] + 0.25, x.range[1] + 0.5, x.range[1] + #
  #            0.5, x.range[1] + 0.25), c(-2, -2, nrow(counts) + #
  #                                         3, nrow(counts) + 3), col = "white", border = "white")#
  par(xpd = FALSE)#
  #abline(v = c(x.range[1] + 0.25, x.range[1] + 0.5))#
  mtext(xlab, 3, 2.2, cex = 0.8)#
  mtext(xlab, 1, 2.2, cex = 0.8)#
}
counts.cohort.plot(Genotype_datasets)
#Load Packages and modified plotting function#
library(wholebrain)#
genotype <- 'Tac'#
#set path for data combined by animal#
combindedAnimalFolder<- file.path(getwd(),'Composite Data',genotype,'CompositeData')#
mouseFiles<-list.files(combindedAnimalFolder, full.names=TRUE, pattern = "\\.Rdata$")#
#
#Start with the first section#
i = 1#
firstMouse = mouseFiles[i]#
if (length(firstMouse)==1) {#
  load(firstMouse[1])#
  Genotype_datasets<-datasets#
}#
#
#Use Rbind to add addictional sections#
for(i in 2:length(mouseFiles)){#
    load(mouseFiles[1])#
    Genotype_datasets <-rbind(Genotype_datasets, datasets)#
}#
#
#Plot the combined data and save out a combined .Rdata file#
counts.plot(Genotype_datasets)#
filename <- file.path(getwd(),'Composite Data',genotype,paste(genotype, '_composite_plot.pdf',sep = "", collapse=NULL))#
quartz.save(filename,type="pdf")#
save(Genotype_datasets, file=file.path(getwd(), 'Composite Data',genotype,paste(genotype, '_compositeData.Rdata',sep = "", collapse=NULL)))
genotype <- 'Tac1'#
#set path for data combined by animal#
combindedAnimalFolder<- file.path(getwd(),'Composite Data',genotype,'CompositeData')#
mouseFiles<-list.files(combindedAnimalFolder, full.names=TRUE, pattern = "\\.Rdata$")#
#
#Start with the first section#
i = 1#
firstMouse = mouseFiles[i]#
if (length(firstMouse)==1) {#
  load(firstMouse[1])#
  Genotype_datasets<-datasets#
}#
#
#Use Rbind to add addictional sections#
for(i in 2:length(mouseFiles)){#
    load(mouseFiles[1])#
    Genotype_datasets <-rbind(Genotype_datasets, datasets)#
}#
#
#Plot the combined data and save out a combined .Rdata file#
counts.plot(Genotype_datasets)#
filename <- file.path(getwd(),'Composite Data',genotype,paste(genotype, '_composite_plot.pdf',sep = "", collapse=NULL))#
quartz.save(filename,type="pdf")#
save(Genotype_datasets, file=file.path(getwd(), 'Composite Data',genotype,paste(genotype, '_compositeData.Rdata',sep = "", collapse=NULL)))
genotype <- 'Tac1-PVT'#
#set path for data combined by animal#
combindedAnimalFolder<- file.path(getwd(),'Composite Data',genotype,'CompositeData')#
mouseFiles<-list.files(combindedAnimalFolder, full.names=TRUE, pattern = "\\.Rdata$")#
#
#Start with the first section#
i = 1#
firstMouse = mouseFiles[i]#
if (length(firstMouse)==1) {#
  load(firstMouse[1])#
  Genotype_datasets<-datasets#
}#
#
#Use Rbind to add addictional sections#
for(i in 2:length(mouseFiles)){#
    load(mouseFiles[1])#
    Genotype_datasets <-rbind(Genotype_datasets, datasets)#
}#
#
#Plot the combined data and save out a combined .Rdata file#
counts.plot(Genotype_datasets)#
filename <- file.path(getwd(),'Composite Data',genotype,paste(genotype, '_composite_plot.pdf',sep = "", collapse=NULL))#
quartz.save(filename,type="pdf")#
save(Genotype_datasets, file=file.path(getwd(), 'Composite Data',genotype,paste(genotype, '_compositeData.Rdata',sep = "", collapse=NULL)))
genotype <- 'Tac1'#
#set path for data combined by animal#
combindedAnimalFolder<- file.path(getwd(),'Composite Data',genotype,'CompositeData')#
mouseFiles<-list.files(combindedAnimalFolder, full.names=TRUE, pattern = "\\.Rdata$")#
#
#Start with the first section#
i = 1#
firstMouse = mouseFiles[i]#
if (length(firstMouse)==1) {#
  load(firstMouse[1])#
  Genotype_datasets<-datasets#
}#
#
#Use Rbind to add addictional sections#
for(i in 2:length(mouseFiles)){#
    load(mouseFiles[1])#
    Genotype_datasets <-rbind(Genotype_datasets, datasets)#
}counts.plot(Genotype_datasets)#
filename <- file.path(getwd(),'Composite Data',genotype,paste(genotype, '_composite_plot.pdf',sep = "", collapse=NULL))#
quartz.save(filename,type="pdf")#
save(Genotype_datasets, file=file.path(getwd(), 'Composite Data',genotype,paste(genotype, '_compositeData.Rdata',sep = "", collapse=NULL)))
genotype <- 'Tac1'#
#set path for data combined by animal#
combindedAnimalFolder<- file.path(getwd(),'Composite Data',genotype,'CompositeData')#
mouseFiles<-list.files(combindedAnimalFolder, full.names=TRUE, pattern = "\\.Rdata$")#
#
#Start with the first section#
i = 1#
firstMouse = mouseFiles[i]#
if (length(firstMouse)==1) {#
  load(firstMouse[1])#
  Genotype_datasets<-datasets#
}#
#
#Use Rbind to add addictional sections#
for(i in 2:length(mouseFiles)){#
    load(mouseFiles[1])#
    Genotype_datasets <-rbind(Genotype_datasets, datasets)#
}#
#
#Plot the combined data and save out a combined .Rdata file#
counts.plot(Genotype_datasets)
Genotype_datasets
genotype <- 'Tac1'#
#set path for data combined by animal#
combindedAnimalFolder<- file.path(getwd(),'Composite Data',genotype,'CompositeData')#
mouseFiles<-list.files(combindedAnimalFolder, full.names=TRUE, pattern = "\\.Rdata$")#
#
#Start with the first section#
i = 1#
firstMouse = mouseFiles[i]#
if (length(firstMouse)==1) {#
  load(firstMouse[1])#
  Genotype_datasets<-datasets#
}#
#
#Use Rbind to add addictional sections#
for(i in 2:length(mouseFiles)){#
    load(mouseFiles[i])#
    Genotype_datasets <-rbind(Genotype_datasets, datasets)#
}#
#
#Plot the combined data and save out a combined .Rdata file#
counts.plot(Genotype_datasets)#
filename <- file.path(getwd(),'Composite Data',genotype,paste(genotype, '_composite_plot.pdf',sep = "", collapse=NULL))#
quartz.save(filename,type="pdf")#
save(Genotype_datasets, file=file.path(getwd(), 'Composite Data',genotype,paste(genotype, '_compositeData.Rdata',sep = "", collapse=NULL)))
genotype <- 'Th'#
#set path for data combined by animal#
combindedAnimalFolder<- file.path(getwd(),'Composite Data',genotype,'CompositeData')#
mouseFiles<-list.files(combindedAnimalFolder, full.names=TRUE, pattern = "\\.Rdata$")#
#
#Start with the first section#
i = 1#
firstMouse = mouseFiles[i]#
if (length(firstMouse)==1) {#
  load(firstMouse[1])#
  Genotype_datasets<-datasets#
}#
#
#Use Rbind to add addictional sections#
for(i in 2:length(mouseFiles)){#
    load(mouseFiles[i])#
    Genotype_datasets <-rbind(Genotype_datasets, datasets)#
}#
#
#Plot the combined data and save out a combined .Rdata file#
counts.plot(Genotype_datasets)#
filename <- file.path(getwd(),'Composite Data',genotype,paste(genotype, '_composite_plot.pdf',sep = "", collapse=NULL))#
quartz.save(filename,type="pdf")#
save(Genotype_datasets, file=file.path(getwd(), 'Composite Data',genotype,paste(genotype, '_compositeData.Rdata',sep = "", collapse=NULL)))
genotype <- 'Tac1-PVT'#
#set path for data combined by animal#
combindedAnimalFolder<- file.path(getwd(),'Composite Data',genotype,'CompositeData')#
mouseFiles<-list.files(combindedAnimalFolder, full.names=TRUE, pattern = "\\.Rdata$")#
#
#Start with the first section#
i = 1#
firstMouse = mouseFiles[i]#
if (length(firstMouse)==1) {#
  load(firstMouse[1])#
  Genotype_datasets<-datasets#
}#
#
#Use Rbind to add addictional sections#
for(i in 2:length(mouseFiles)){#
    load(mouseFiles[i])#
    Genotype_datasets <-rbind(Genotype_datasets, datasets)#
}#
#
#Plot the combined data and save out a combined .Rdata file#
counts.plot(Genotype_datasets)#
filename <- file.path(getwd(),'Composite Data',genotype,paste(genotype, '_composite_plot.pdf',sep = "", collapse=NULL))#
quartz.save(filename,type="pdf")#
save(Genotype_datasets, file=file.path(getwd(), 'Composite Data',genotype,paste(genotype, '_compositeData.Rdata',sep = "", collapse=NULL)))
#Plot all areas so to compare across genotypes#
counts.plot(Genotype_datasets, countThreshold=30)#
filename <- file.path(getwd(),genotype,paste(genotype, '_cohort_plot.pdf',sep = "", collapse=NULL))#
quartz.save(filename,type="pdf")#
#
genotypeFolders<-list.dirs(file.path(getwd(),'Composite Data'), full.names = TRUE, recursive = FALSE)#
genotypeFolders=genotypeFolders[c(2, 4)]#
genotypes <-list.dirs(file.path(getwd(),'Composite Data'), full.names = FALSE, recursive = FALSE)#
genotypes = genotypes[c(2, 4)]#
i=1#
fname = list.files(genotypeFolders[i], full.names=TRUE, pattern = "\\.Rdata$")#
load(fname)#
cohortData <-Genotype_datasets#
cohortData$genotype = genotypes[i]
for(i in 1:length(genotypeFolders)){#
  fname = list.files(genotypeFolders[i], full.names=TRUE, pattern = "\\.Rdata$")#
  load(fname)#
  Genotype_datasets$genotype = genotypes[i]#
  cohortData<-rbind(cohortData, Genotype_datasets)#
}#
#
regions <- unique(cohortData$acronym)
d = matrix(0, nrow = length(regions), ncol = length(genotypes))#
for(i in 1:length(regions)){#
  area<-subset(cohortData, acronym == regions[i])#
  for(c in 1:length(genotypes)){#
  d[i, c]<-nrow(subset(area, genotype == genotypes[c]))#
  }#
}#
#
colnames(d) <- genotypes#
rownames(d) <- regions#
cohort <- as.table(d)#
row.names.remove <- c("LH", "MH", "PVT","fiber tracts")#
cohort<-cohort[!(row.names(cohort) %in% row.names.remove), ]
total <-  colSums(cohort)#
for(i in 1:length(genotypes)){#
  cohort[,i]<-cohort[,i]/total[i]*100#
}#
cohort <- cbind(cohort, Total = rowSums(cohort))#
cohort <- cohort[order(cohort[, 2], decreasing = TRUE), ]#
#
maxCounts<-apply(cohort, 1, FUN=max)#
idxKeepRow<- which(maxCounts>1)#
cohort<-cohort[idxKeepRow,]#
cohort<-cohort[,1:2]
counts.compare.plot<-function (cohort, device = TRUE, region.lab = "Input region:", xlab= 'Pct. of Cells', countThreshold = 10, sorted = TRUE) #
{#
  counts<-cohort#
  if (device) {#
    #quartz(width = 7.036585, height = 0.2099039 * nrow(counts))#
    quartz(width = 17.036585, height = 20.2099039)#
  }#
  quartz(width = 7.036585, height = 10.2099039)#
  layout(matrix(c(1, 1, 1, 2, 2, 2, 2), nrow = 1))#
  par(mar = c(4, 2, 4, 2))#
  par(mar=rep(1,4))#
  plot(rep(2.5, nrow(counts)), nrow(counts):1, col = 0, #
       axes = F, ylim = c(0.5, nrow(counts) + 0.5), ylab = "", #
       xlab = "", xlim = c(1, 5))#
  mtext(region.lab, 3, cex = 0.9)#
  for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.1)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(1, 5, 5, 1), c(y.lab - 0.5, y.lab - 0.5, #
                             y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
    text(3, y.lab, name.from.acronym(row.names(counts)[i]), #
         cex = 0.9)#
  }#
  par(xpd = TRUE)#
  legend(3, 1.5, c("Calb1", "Tac1","Tac1-PVT","Th"), pch = c(21), pt.bg = c("orange","blue","white","green"), #
                                                              title = "Genotype:", bg = "white", #
         horiz = TRUE, cex = .75, xjust = 0.5)#
  par(xpd = FALSE)#
  par(mar = c(4, 4, 4, 6))#
  zeros <- min(is.finite(counts)) - 1#
  counts[!is.finite(counts)] <- zeros#
  x.range <- ceiling(range(counts))#
  plot(apply(counts, 1, max), nrow(counts):1 - 0.125, pch = 21, #
       bg = "white", ylim = c(0.5, nrow(counts) + 0.5), #
       xlim = x.range, xlab = "", axes = F, ylab = "", col = 0)#
  for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.05)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(x.range, rev(x.range)), c(y.lab - 0.5, #
                                        y.lab - 0.5, y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
  }#
  log.range <- 10^seq(x.range[1], x.range[2])#
  axis(1, at = seq(x.range[1], x.range[2],5), las = 1, labels = seq(x.range[1], x.range[2],5))#
  axis(3, at = seq(x.range[1], x.range[2],5), las = 1, labels = seq(x.range[1], x.range[2],5))#
  log.range <- unlist(lapply(1:(length(log.range) - 1), #
                             function(x) {#
                               seq(log.range[x], log.range[x + 1], by = log.range[x])#
                             }))#
  #axis(1, at = log10(log.range), labels = FALSE)#
  #axis(3, at = log10(log.range), labels = FALSE)#
  axis(2, at = nrow(counts):1, labels = row.names(counts), #
       las = 1)#
  axis(4, at = nrow(counts):1, labels = row.names(counts), #
       las = 1)#
  abline(h = 1:nrow(counts), lty = 2, col = "gray")#
  abline(v = seq(x.range[1], x.range[2],5), col = "lightblue")#
  points(counts[, 1], nrow(counts):1, #
         pch = 21, bg = "orange", cex = 1.2)#
  points(counts[, 2], nrow(counts):1, #
         pch = 21, bg = "blue", cex = 1.2)#
  points(counts[, 3], nrow(counts):1, #
         pch = 21, bg = 'white', cex = 1.2)#
  points(counts[, 4], nrow(counts):1, #
         pch = 21, bg = "green", cex = 1.2)#
  box()#
  par(xpd = TRUE)#
  polygon(c(x.range[1] + 0.25, x.range[1] + 0.5, x.range[1] + #
              0.5, x.range[1] + 0.25), c(-2, -2, nrow(counts) + #
                                           3, nrow(counts) + 3), col = "white", border = "white")#
  par(xpd = FALSE)#
  abline(v = c(x.range[1] + 0.25, x.range[1] + 0.5))#
  mtext(xlab, 3, 2.2, cex = 0.8)#
  mtext(xlab, 1, 2.2, cex = 0.8)#
}
counts.compare.plot(cohort, device = TRUE, region.lab = "Input region:", xlab= 'Pct. of Cells', countThreshold = 5, sorted = TRUE)
#Plot all areas so to compare across genotypes#
counts.plot(Genotype_datasets, countThreshold=30)#
filename <- file.path(getwd(),genotype,paste(genotype, '_cohort_plot.pdf',sep = "", collapse=NULL))#
quartz.save(filename,type="pdf")#
#
genotypeFolders<-list.dirs(file.path(getwd(),'Composite Data'), full.names = TRUE, recursive = FALSE)#
#genotypeFolders=genotypeFolders[c(2, 4)]#
genotypes <-list.dirs(file.path(getwd(),'Composite Data'), full.names = FALSE, recursive = FALSE)#
genotypes = genotypes[c(2, 4)]#
i=1#
fname = list.files(genotypeFolders[i], full.names=TRUE, pattern = "\\.Rdata$")#
load(fname)#
cohortData <-Genotype_datasets#
cohortData$genotype = genotypes[i]#
for(i in 1:length(genotypeFolders)){#
  fname = list.files(genotypeFolders[i], full.names=TRUE, pattern = "\\.Rdata$")#
  load(fname)#
  Genotype_datasets$genotype = genotypes[i]#
  cohortData<-rbind(cohortData, Genotype_datasets)#
}#
#
regions <- unique(cohortData$acronym)#
d = matrix(0, nrow = length(regions), ncol = length(genotypes))#
for(i in 1:length(regions)){#
  area<-subset(cohortData, acronym == regions[i])#
  for(c in 1:length(genotypes)){#
  d[i, c]<-nrow(subset(area, genotype == genotypes[c]))#
  }#
}#
#
colnames(d) <- genotypes#
rownames(d) <- regions#
cohort <- as.table(d)#
row.names.remove <- c("LH", "MH", "PVT","fiber tracts")#
cohort<-cohort[!(row.names(cohort) %in% row.names.remove), ]#
#
total <-  colSums(cohort)#
for(i in 1:length(genotypes)){#
  cohort[,i]<-cohort[,i]/total[i]*100#
}#
cohort <- cbind(cohort, Total = rowSums(cohort))#
cohort <- cohort[order(cohort[, 2], decreasing = TRUE), ]#
#
maxCounts<-apply(cohort, 1, FUN=max)#
idxKeepRow<- which(maxCounts>1)#
cohort<-cohort[idxKeepRow,]#
cohort<-cohort[,1:2]
counts.compare.plot(cohort, device = TRUE, region.lab = "Input region:", xlab= 'Pct. of Cells', countThreshold = 5, sorted = TRUE)
genotypeFolders<-list.dirs(file.path(getwd(),'Composite Data'), full.names = TRUE, recursive = FALSE)#
#genotypeFolders=genotypeFolders[c(2, 4)]#
genotypes <-list.dirs(file.path(getwd(),'Composite Data'), full.names = FALSE, recursive = FALSE)#
genotypes = genotypes[c(2, 4)]#
i=1#
fname = list.files(genotypeFolders[i], full.names=TRUE, pattern = "\\.Rdata$")#
load(fname)#
cohortData <-Genotype_datasets#
cohortData$genotype = genotypes[i]#
for(i in 1:length(genotypeFolders)){#
  fname = list.files(genotypeFolders[i], full.names=TRUE, pattern = "\\.Rdata$")#
  load(fname)#
  Genotype_datasets$genotype = genotypes[i]#
  cohortData<-rbind(cohortData, Genotype_datasets)#
}#
#
regions <- unique(cohortData$acronym)#
d = matrix(0, nrow = length(regions), ncol = length(genotypes))#
for(i in 1:length(regions)){#
  area<-subset(cohortData, acronym == regions[i])#
  for(c in 1:length(genotypes)){#
  d[i, c]<-nrow(subset(area, genotype == genotypes[c]))#
  }#
}#
#
colnames(d) <- genotypes#
rownames(d) <- regions#
cohort <- as.table(d)#
row.names.remove <- c("LH", "MH", "PVT","fiber tracts")#
cohort<-cohort[!(row.names(cohort) %in% row.names.remove), ]#
#
total <-  colSums(cohort)#
for(i in 1:length(genotypes)){#
  cohort[,i]<-cohort[,i]/total[i]*100#
}#
cohort <- cbind(cohort, Total = rowSums(cohort))#
cohort <- cohort[order(cohort[, 2], decreasing = TRUE), ]#
#
maxCounts<-apply(cohort, 1, FUN=max)#
idxKeepRow<- which(maxCounts>1)#
cohort<-cohort[idxKeepRow,]#
#cohort<-cohort[,1:2]
counts.compare.plot(cohort, device = TRUE, region.lab = "Input region:", xlab= 'Pct. of Cells', countThreshold = 5, sorted = TRUE)
#Plot all areas so to compare across genotypes#
counts.plot(Genotype_datasets, countThreshold=30)#
filename <- file.path(getwd(),genotype,paste(genotype, '_cohort_plot.pdf',sep = "", collapse=NULL))#
quartz.save(filename,type="pdf")#
#
genotypeFolders<-list.dirs(file.path(getwd(),'Composite Data'), full.names = TRUE, recursive = FALSE)#
#genotypeFolders=genotypeFolders[c(2, 4)]#
genotypes <-list.dirs(file.path(getwd(),'Composite Data'), full.names = FALSE, recursive = FALSE)#
#genotypes = genotypes[c(2, 4)]#
i=1#
fname = list.files(genotypeFolders[i], full.names=TRUE, pattern = "\\.Rdata$")#
load(fname)#
cohortData <-Genotype_datasets#
cohortData$genotype = genotypes[i]#
for(i in 1:length(genotypeFolders)){#
  fname = list.files(genotypeFolders[i], full.names=TRUE, pattern = "\\.Rdata$")#
  load(fname)#
  Genotype_datasets$genotype = genotypes[i]#
  cohortData<-rbind(cohortData, Genotype_datasets)#
}#
#
regions <- unique(cohortData$acronym)#
d = matrix(0, nrow = length(regions), ncol = length(genotypes))#
for(i in 1:length(regions)){#
  area<-subset(cohortData, acronym == regions[i])#
  for(c in 1:length(genotypes)){#
  d[i, c]<-nrow(subset(area, genotype == genotypes[c]))#
  }#
}#
#
colnames(d) <- genotypes#
rownames(d) <- regions#
cohort <- as.table(d)#
row.names.remove <- c("LH", "MH", "PVT","fiber tracts")#
cohort<-cohort[!(row.names(cohort) %in% row.names.remove), ]#
#
total <-  colSums(cohort)#
for(i in 1:length(genotypes)){#
  cohort[,i]<-cohort[,i]/total[i]*100#
}#
cohort <- cbind(cohort, Total = rowSums(cohort))#
cohort <- cohort[order(cohort[, 2], decreasing = TRUE), ]#
#
maxCounts<-apply(cohort, 1, FUN=max)#
idxKeepRow<- which(maxCounts>1)#
cohort<-cohort[idxKeepRow,]#
#cohort<-cohort[,1:2]
counts.compare.plot(cohort, device = TRUE, region.lab = "Input region:", xlab= 'Pct. of Cells', countThreshold = 5, sorted = TRUE)
device = TRUE
region.lab = "Input region:"
xlab= 'Pct. of Cells'
countThreshold = 10
sorted = TRUE
counts<-cohort#
  if (device) {#
    #quartz(width = 7.036585, height = 0.2099039 * nrow(counts))#
    quartz(width = 17.036585, height = 20.2099039)#
  }#
  quartz(width = 7.036585, height = 10.2099039)#
  layout(matrix(c(1, 1, 1, 2, 2, 2, 2), nrow = 1))#
  par(mar = c(4, 2, 4, 2))#
  par(mar=rep(1,4))#
  plot(rep(2.5, nrow(counts)), nrow(counts):1, col = 0, #
       axes = F, ylim = c(0.5, nrow(counts) + 0.5), ylab = "", #
       xlab = "", xlim = c(1, 5))#
  mtext(region.lab, 3, cex = 0.9)
for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.1)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(1, 5, 5, 1), c(y.lab - 0.5, y.lab - 0.5, #
                             y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
    text(3, y.lab, name.from.acronym(row.names(counts)[i]), #
         cex = 0.9)#
  }
par(xpd = TRUE)#
  legend(3, 1.5, c("Calb1", "Tac1","Tac1-PVT","Th"), pch = c(21), pt.bg = c("orange","blue","white","green"), #
                                                              title = "Genotype:", bg = "white", #
         horiz = TRUE, cex = .75, xjust = 0.5)#
  par(xpd = FALSE)#
  par(mar = c(4, 4, 4, 6))#
  zeros <- min(is.finite(counts)) - 1#
  counts[!is.finite(counts)] <- zeros
x.range <- ceiling(range(counts))
plot(apply(counts, 1, max), nrow(counts):1 - 0.125, pch = 21, #
       bg = "white", ylim = c(0.5, nrow(counts) + 0.5), #
       xlim = x.range, xlab = "", axes = F, ylab = "", col = 0)
for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.05)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(x.range, rev(x.range)), c(y.lab - 0.5, #
                                        y.lab - 0.5, y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
  }
log.range <- 10^seq(x.range[1], x.range[2])
axis(1, at = seq(x.range[1], x.range[2],5), las = 1, labels = seq(x.range[1], x.range[2],5))
x.range
x.range <- ceiling(range(counts))
x.range
counts
x.range <- ceiling(range(counts[;0:3]))
x.range <- ceiling(range(counts[,0:3]))
x.range <- ceiling(range(counts[,0:length(genotypes)-1]))#
x.range
counts.compare.plot<-function (cohort, device = TRUE, region.lab = "Input region:", xlab= 'Pct. of Cells', countThreshold = 10, sorted = TRUE) #
{#
  counts<-cohort#
  if (device) {#
    #quartz(width = 7.036585, height = 0.2099039 * nrow(counts))#
    quartz(width = 17.036585, height = 20.2099039)#
  }#
  quartz(width = 7.036585, height = 10.2099039)#
  layout(matrix(c(1, 1, 1, 2, 2, 2, 2), nrow = 1))#
  par(mar = c(4, 2, 4, 2))#
  par(mar=rep(1,4))#
  plot(rep(2.5, nrow(counts)), nrow(counts):1, col = 0, #
       axes = F, ylim = c(0.5, nrow(counts) + 0.5), ylab = "", #
       xlab = "", xlim = c(1, 5))#
  mtext(region.lab, 3, cex = 0.9)#
  for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.1)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(1, 5, 5, 1), c(y.lab - 0.5, y.lab - 0.5, #
                             y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
    text(3, y.lab, name.from.acronym(row.names(counts)[i]), #
         cex = 0.9)#
  }#
  par(xpd = TRUE)#
  legend(3, 1.5, c("Calb1", "Tac1","Tac1-PVT","Th"), pch = c(21), pt.bg = c("orange","blue","white","green"), #
                                                              title = "Genotype:", bg = "white", #
         horiz = TRUE, cex = .75, xjust = 0.5)#
  par(xpd = FALSE)#
  par(mar = c(4, 4, 4, 6))#
  zeros <- min(is.finite(counts)) - 1#
  counts[!is.finite(counts)] <- zeros#
  x.range <- ceiling(range(counts[,0:length(genotypes)-1]))#
  plot(apply(counts, 1, max), nrow(counts):1 - 0.125, pch = 21, #
       bg = "white", ylim = c(0.5, nrow(counts) + 0.5), #
       xlim = x.range, xlab = "", axes = F, ylab = "", col = 0)#
  for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.05)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(x.range, rev(x.range)), c(y.lab - 0.5, #
                                        y.lab - 0.5, y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
  }#
  log.range <- 10^seq(x.range[1], x.range[2])#
  axis(1, at = seq(x.range[1], x.range[2],5), las = 1, labels = seq(x.range[1], x.range[2],5))#
  axis(3, at = seq(x.range[1], x.range[2],5), las = 1, labels = seq(x.range[1], x.range[2],5))#
  log.range <- unlist(lapply(1:(length(log.range) - 1), #
                             function(x) {#
                               seq(log.range[x], log.range[x + 1], by = log.range[x])#
                             }))#
  #axis(1, at = log10(log.range), labels = FALSE)#
  #axis(3, at = log10(log.range), labels = FALSE)#
  axis(2, at = nrow(counts):1, labels = row.names(counts), #
       las = 1)#
  axis(4, at = nrow(counts):1, labels = row.names(counts), #
       las = 1)#
  abline(h = 1:nrow(counts), lty = 2, col = "gray")#
  abline(v = seq(x.range[1], x.range[2],5), col = "lightblue")#
  points(counts[, 1], nrow(counts):1, #
         pch = 21, bg = "orange", cex = 1.2)#
  points(counts[, 2], nrow(counts):1, #
         pch = 21, bg = "blue", cex = 1.2)#
  points(counts[, 3], nrow(counts):1, #
         pch = 21, bg = 'white', cex = 1.2)#
  points(counts[, 4], nrow(counts):1, #
         pch = 21, bg = "green", cex = 1.2)#
  box()#
  par(xpd = TRUE)#
  polygon(c(x.range[1] + 0.25, x.range[1] + 0.5, x.range[1] + #
              0.5, x.range[1] + 0.25), c(-2, -2, nrow(counts) + #
                                           3, nrow(counts) + 3), col = "white", border = "white")#
  par(xpd = FALSE)#
  abline(v = c(x.range[1] + 0.25, x.range[1] + 0.5))#
  mtext(xlab, 3, 2.2, cex = 0.8)#
  mtext(xlab, 1, 2.2, cex = 0.8)#
}#
#
counts.compare.plot(cohort, device = TRUE, region.lab = "Input region:", xlab= 'Pct. of Cells', countThreshold = 5, sorted = TRUE)
x.range <- ceiling(range(counts[,0:(length(genotypes)-1)]))
x.range
counts.compare.plot<-function (cohort, device = TRUE, region.lab = "Input region:", xlab= 'Pct. of Cells', countThreshold = 10, sorted = TRUE) #
{#
  counts<-cohort#
  if (device) {#
    #quartz(width = 7.036585, height = 0.2099039 * nrow(counts))#
    quartz(width = 17.036585, height = 20.2099039)#
  }#
  quartz(width = 7.036585, height = 10.2099039)#
  layout(matrix(c(1, 1, 1, 2, 2, 2, 2), nrow = 1))#
  par(mar = c(4, 2, 4, 2))#
  par(mar=rep(1,4))#
  plot(rep(2.5, nrow(counts)), nrow(counts):1, col = 0, #
       axes = F, ylim = c(0.5, nrow(counts) + 0.5), ylab = "", #
       xlab = "", xlim = c(1, 5))#
  mtext(region.lab, 3, cex = 0.9)#
  for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.1)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(1, 5, 5, 1), c(y.lab - 0.5, y.lab - 0.5, #
                             y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
    text(3, y.lab, name.from.acronym(row.names(counts)[i]), #
         cex = 0.9)#
  }#
  par(xpd = TRUE)#
  legend(3, 1.5, c("Calb1", "Tac1","Tac1-PVT","Th"), pch = c(21), pt.bg = c("orange","blue","white","green"), #
                                                              title = "Genotype:", bg = "white", #
         horiz = TRUE, cex = .75, xjust = 0.5)#
  par(xpd = FALSE)#
  par(mar = c(4, 4, 4, 6))#
  zeros <- min(is.finite(counts)) - 1#
  counts[!is.finite(counts)] <- zeros#
  x.range <- ceiling(range(counts[,0:(length(genotypes)-1)]))#
  plot(apply(counts, 1, max), nrow(counts):1 - 0.125, pch = 21, #
       bg = "white", ylim = c(0.5, nrow(counts) + 0.5), #
       xlim = x.range, xlab = "", axes = F, ylab = "", col = 0)#
  for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.05)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(x.range, rev(x.range)), c(y.lab - 0.5, #
                                        y.lab - 0.5, y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
  }#
  log.range <- 10^seq(x.range[1], x.range[2])#
  axis(1, at = seq(x.range[1], x.range[2],5), las = 1, labels = seq(x.range[1], x.range[2],5))#
  axis(3, at = seq(x.range[1], x.range[2],5), las = 1, labels = seq(x.range[1], x.range[2],5))#
  log.range <- unlist(lapply(1:(length(log.range) - 1), #
                             function(x) {#
                               seq(log.range[x], log.range[x + 1], by = log.range[x])#
                             }))#
  #axis(1, at = log10(log.range), labels = FALSE)#
  #axis(3, at = log10(log.range), labels = FALSE)#
  axis(2, at = nrow(counts):1, labels = row.names(counts), #
       las = 1)#
  axis(4, at = nrow(counts):1, labels = row.names(counts), #
       las = 1)#
  abline(h = 1:nrow(counts), lty = 2, col = "gray")#
  abline(v = seq(x.range[1], x.range[2],5), col = "lightblue")#
  points(counts[, 1], nrow(counts):1, #
         pch = 21, bg = "orange", cex = 1.2)#
  points(counts[, 2], nrow(counts):1, #
         pch = 21, bg = "blue", cex = 1.2)#
  points(counts[, 3], nrow(counts):1, #
         pch = 21, bg = 'white', cex = 1.2)#
  points(counts[, 4], nrow(counts):1, #
         pch = 21, bg = "green", cex = 1.2)#
  box()#
  par(xpd = TRUE)#
  polygon(c(x.range[1] + 0.25, x.range[1] + 0.5, x.range[1] + #
              0.5, x.range[1] + 0.25), c(-2, -2, nrow(counts) + #
                                           3, nrow(counts) + 3), col = "white", border = "white")#
  par(xpd = FALSE)#
  abline(v = c(x.range[1] + 0.25, x.range[1] + 0.5))#
  mtext(xlab, 3, 2.2, cex = 0.8)#
  mtext(xlab, 1, 2.2, cex = 0.8)#
}#
#
counts.compare.plot(cohort, device = TRUE, region.lab = "Input region:", xlab= 'Pct. of Cells', countThreshold = 5, sorted = TRUE) #
filename <- file.path(getwd(),'Composite Data',paste('CompareCohorts.pdf',sep = "", collapse=NULL))
#Load Packages and modified plotting function#
setwd('/Volumes/GoogleDrive/My Drive/Rabies_registration/wholebrain')#
library(wholebrain)#
genotype <- 'Tac1'#
counts.plot<-function (dataset, device = TRUE, region.lab = "Input region:", xlab= 'Cell count', countThreshold = 10, sorted = TRUE) #
{#
  if(ncol(dataset)<3){#
    counts<-dataset#
  }else{#
    counts <- table(as.character(dataset$acronym), dataset$right.hemisphere)#
  }#
  #counts <- table(as.character(datasets$acronym), datasets$right.hemisphere)#
  maxCounts<-apply(counts, 1, FUN=max)#
  idxKeepRow<- which(maxCounts>countThreshold)#
  counts<-counts[idxKeepRow,]#
  #hemisphere.to.sort <- which.max(colSums(counts*is.finite(counts),na.rm=TRUE ))#
  if (sorted) {#
  counts <- cbind(counts, Total = rowSums(counts))#
  counts <- counts[order(counts[, 3], decreasing = TRUE), ]#
  counts <- counts[,1:2]#
  }#
  #counts <- counts[order(counts[, hemisphere.to.sort], decreasing = TRUE), ]#
  counts <- log10(counts)#
  if (device) {#
    #quartz(width = 7.036585, height = 0.2099039 * nrow(counts))#
    quartz(width = 17.036585, height = 20.2099039)#
  }#
  quartz(width = 7.036585, height = 10.2099039)#
  layout(matrix(c(1, 1, 1, 2, 2, 2, 2), nrow = 1))#
  par(mar = c(4, 2, 4, 2))#
  par(mar=rep(1,4))#
  plot(rep(2.5, nrow(counts)), nrow(counts):1, col = 0, #
       axes = F, ylim = c(0.5, nrow(counts) + 0.5), ylab = "", #
       xlab = "", xlim = c(1, 5))#
  mtext(region.lab, 3, cex = 0.9)#
  for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.1)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(1, 5, 5, 1), c(y.lab - 0.5, y.lab - 0.5, #
                             y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
    text(3, y.lab, name.from.acronym(row.names(counts)[i]), #
         cex = 0.9)#
  }#
  par(xpd = TRUE)#
  legend(3, -0.75, c("Left", "Right"), pch = c(21), pt.bg = c("white", #
                                                              gray(0.2)), title = "Hemisphere:", bg = "white", #
         horiz = TRUE, cex = 1.3, xjust = 0.5)#
  par(xpd = FALSE)#
  par(mar = c(4, 4, 4, 6))#
  zeros <- min(is.finite(counts)) - 1#
  counts[!is.finite(counts)] <- zeros#
  x.range <- ceiling(range(counts[is.finite(counts)]))#
  plot(apply(counts, 1, max), nrow(counts):1 - 0.125, pch = 21, #
       bg = "white", ylim = c(0.5, nrow(counts) + 0.5), #
       xlim = x.range, xlab = "", axes = F, ylab = "", col = 0)#
  for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.05)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(x.range, rev(x.range)), c(y.lab - 0.5, #
                                        y.lab - 0.5, y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
  }#
  log.range <- 10^seq(x.range[1], x.range[2])#
  axis(1, at = seq(x.range[1], x.range[2]), las = 1, labels = c(0, #
                                                                log.range[-1]))#
  axis(3, at = seq(x.range[1], x.range[2]), las = 1, labels = c(0, #
                                                                log.range[-1]))#
  log.range <- unlist(lapply(1:(length(log.range) - 1), #
                             function(x) {#
                               seq(log.range[x], log.range[x + 1], by = log.range[x])#
                             }))#
  axis(1, at = log10(log.range), labels = FALSE)#
  axis(3, at = log10(log.range), labels = FALSE)#
  axis(2, at = nrow(counts):1, labels = row.names(counts), #
       las = 1)#
  axis(4, at = nrow(counts):1, labels = row.names(counts), #
       las = 1)#
  abline(h = 1:nrow(counts), lty = 2, col = "gray")#
  abline(v = log10(log.range), col = "lightblue")#
  lapply(1:nrow(counts), function(x) {#
    lines(counts[x, ], rep(nrow(counts) - x + 1, 2), #
          lwd = 2)#
  })#
  points(counts[, 2], nrow(counts):1, #
         pch = 21, bg = gray(0.2), cex = 1.2)#
  points(counts[, 1], nrow(counts):1, #
         pch = 21, bg = "white", cex = 1.2)#
  box()#
  par(xpd = TRUE)#
  polygon(c(x.range[1] + 0.25, x.range[1] + 0.5, x.range[1] + #
              0.5, x.range[1] + 0.25), c(-2, -2, nrow(counts) + #
                                           3, nrow(counts) + 3), col = "white", border = "white")#
  par(xpd = FALSE)#
  abline(v = c(x.range[1] + 0.25, x.range[1] + 0.5))#
  mtext(xlab, 3, 2.2, cex = 0.8)#
  mtext(xlab, 1, 2.2, cex = 0.8)#
}#
#
#Mouse to analyze#
mouse<-'m1155'#
#
#set animal folder path#
animalFolder<-file.path(getwd(),'BHdata', mouse)#
imageFolders<-list.files(animalFolder, full.names=TRUE)
genotype <- 'Tac1'#
counts.plot<-function (dataset, device = TRUE, region.lab = "Input region:", xlab= 'Cell count', countThreshold = 10, sorted = TRUE) #
{#
  if(ncol(dataset)<3){#
    counts<-dataset#
  }else{#
    counts <- table(as.character(dataset$acronym), dataset$right.hemisphere)#
  }#
  #counts <- table(as.character(datasets$acronym), datasets$right.hemisphere)#
  maxCounts<-apply(counts, 1, FUN=max)#
  idxKeepRow<- which(maxCounts>countThreshold)#
  counts<-counts[idxKeepRow,]#
  #hemisphere.to.sort <- which.max(colSums(counts*is.finite(counts),na.rm=TRUE ))#
  if (sorted) {#
  counts <- cbind(counts, Total = rowSums(counts))#
  counts <- counts[order(counts[, 3], decreasing = TRUE), ]#
  counts <- counts[,1:2]#
  }#
  #counts <- counts[order(counts[, hemisphere.to.sort], decreasing = TRUE), ]#
  counts <- log10(counts)#
  if (device) {#
    #quartz(width = 7.036585, height = 0.2099039 * nrow(counts))#
    quartz(width = 17.036585, height = 20.2099039)#
  }#
  quartz(width = 7.036585, height = 10.2099039)#
  layout(matrix(c(1, 1, 1, 2, 2, 2, 2), nrow = 1))#
  par(mar = c(4, 2, 4, 2))#
  par(mar=rep(1,4))#
  plot(rep(2.5, nrow(counts)), nrow(counts):1, col = 0, #
       axes = F, ylim = c(0.5, nrow(counts) + 0.5), ylab = "", #
       xlab = "", xlim = c(1, 5))#
  mtext(region.lab, 3, cex = 0.9)#
  for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.1)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(1, 5, 5, 1), c(y.lab - 0.5, y.lab - 0.5, #
                             y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
    text(3, y.lab, name.from.acronym(row.names(counts)[i]), #
         cex = 0.9)#
  }#
  par(xpd = TRUE)#
  legend(3, -0.75, c("Left", "Right"), pch = c(21), pt.bg = c("white", #
                                                              gray(0.2)), title = "Hemisphere:", bg = "white", #
         horiz = TRUE, cex = 1.3, xjust = 0.5)#
  par(xpd = FALSE)#
  par(mar = c(4, 4, 4, 6))#
  zeros <- min(is.finite(counts)) - 1#
  counts[!is.finite(counts)] <- zeros#
  x.range <- ceiling(range(counts[is.finite(counts)]))#
  plot(apply(counts, 1, max), nrow(counts):1 - 0.125, pch = 21, #
       bg = "white", ylim = c(0.5, nrow(counts) + 0.5), #
       xlim = x.range, xlab = "", axes = F, ylab = "", col = 0)#
  for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.05)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(x.range, rev(x.range)), c(y.lab - 0.5, #
                                        y.lab - 0.5, y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
  }#
  log.range <- 10^seq(x.range[1], x.range[2])#
  axis(1, at = seq(x.range[1], x.range[2]), las = 1, labels = c(0, #
                                                                log.range[-1]))#
  axis(3, at = seq(x.range[1], x.range[2]), las = 1, labels = c(0, #
                                                                log.range[-1]))#
  log.range <- unlist(lapply(1:(length(log.range) - 1), #
                             function(x) {#
                               seq(log.range[x], log.range[x + 1], by = log.range[x])#
                             }))#
  axis(1, at = log10(log.range), labels = FALSE)#
  axis(3, at = log10(log.range), labels = FALSE)#
  axis(2, at = nrow(counts):1, labels = row.names(counts), #
       las = 1)#
  axis(4, at = nrow(counts):1, labels = row.names(counts), #
       las = 1)#
  abline(h = 1:nrow(counts), lty = 2, col = "gray")#
  abline(v = log10(log.range), col = "lightblue")#
  lapply(1:nrow(counts), function(x) {#
    lines(counts[x, ], rep(nrow(counts) - x + 1, 2), #
          lwd = 2)#
  })#
  points(counts[, 2], nrow(counts):1, #
         pch = 21, bg = gray(0.2), cex = 1.2)#
  points(counts[, 1], nrow(counts):1, #
         pch = 21, bg = "white", cex = 1.2)#
  box()#
  par(xpd = TRUE)#
  polygon(c(x.range[1] + 0.25, x.range[1] + 0.5, x.range[1] + #
              0.5, x.range[1] + 0.25), c(-2, -2, nrow(counts) + #
                                           3, nrow(counts) + 3), col = "white", border = "white")#
  par(xpd = FALSE)#
  abline(v = c(x.range[1] + 0.25, x.range[1] + 0.5))#
  mtext(xlab, 3, 2.2, cex = 0.8)#
  mtext(xlab, 1, 2.2, cex = 0.8)#
}#
#
#Mouse to analyze#
mouse<-'m1155'#
#
#set animal folder path#
animalFolder<-file.path(getwd(),'BHdata', mouse)#
imageFolders<-list.files(animalFolder, full.names=TRUE)#
#
#Start with the first section#
i = 1#
sectionFolder = imageFolders[i]#
imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
if (length(imageFiles)==1) {#
  load(imageFiles[1])#
  dataset$animal=mouse#
  datasets<-dataset#
} else {#
  df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
  mostRecent<-rownames(df)[which.max(df$mtime)]#
  load(mostRecent)#
  datasets<-dataset#
}
i = 2#
sectionFolder = imageFolders[i]#
imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
if (length(imageFiles)==1) {#
  load(imageFiles[1])#
  dataset$animal=mouse#
  datasets<-dataset#
} else {#
  df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
  mostRecent<-rownames(df)[which.max(df$mtime)]#
  load(mostRecent)#
  datasets<-dataset#
}
for(i in 3:length(imageFolders)){#
  sectionFolder = imageFolders[i]#
  imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
  if (length(imageFiles)>0) {#
    if (length(imageFiles)==1) {#
      if (!grepl("x", imageFiles[1], fixed = TRUE)) {#
        load(imageFiles[1])#
        dataset$animal=mouse#
        datasets<-rbind(datasets, dataset)#
      }#
    } else {#
      if (!grepl("x", imageFiles[1], fixed = TRUE)) {#
      df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
      mostRecent<-rownames(df)[which.max(df$mtime)]#
      load(mostRecent)#
      dataset$animal=mouse#
      datasets<-rbind(datasets, dataset)#
      }#
    }#
  }#
}
save(datasets, file=file.path(getwd(), 'Composite Data',genotype,'CompositeData',paste(mouse, '_compositeData.Rdata',sep = "", collapse=NULL)))
quartz#
counts.plot(datasets)#
filename <- file.path(getwd(), 'Composite Data',genotype,'CompositeData',paste(mouse, '_composite_plot.pdf',sep = "", collapse=NULL))#
quartz.save(filename,type="pdf")
quartz#
counts.plot(datasets)
datasets
i = 2#
sectionFolder = imageFolders[i]#
imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
if (length(imageFiles)==1) {#
  load(imageFiles[1])#
  dataset$animal=mouse#
  datasets<-dataset#
} else {#
  df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
  mostRecent<-rownames(df)[which.max(df$mtime)]#
  load(mostRecent)#
  datasets<-dataset#
}#
#Use Rbind to add addictional sections#
for(i in 3:length(imageFolders)){#
  sectionFolder = imageFolders[i]#
  imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
  if (length(imageFiles)>0) {#
    if (length(imageFiles)==1) {#
      if (!grepl("x", imageFiles[1], fixed = TRUE)) {#
        load(imageFiles[1])#
        dataset$animal=mouse#
        datasets<-rbind(datasets, dataset)#
      }#
    } else {#
      if (!grepl("x", imageFiles[1], fixed = TRUE)) {#
      df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
      mostRecent<-rownames(df)[which.max(df$mtime)]#
      load(mostRecent)#
      dataset$animal=mouse#
      datasets<-rbind(datasets, dataset)#
      }#
    }#
  }#
}
save(datasets, file=file.path(getwd(), 'Composite Data',genotype,'CompositeData',paste(mouse, '_compositeData.Rdata',sep = "", collapse=NULL)))
quartz#
counts.plot(datasets)
counts.plot<-function (dataset, device = TRUE, region.lab = "Input region:", xlab= 'Cell count', countThreshold = 10, sorted = TRUE) #
{#
  if(ncol(dataset)<3){#
    counts<-dataset#
  }else{#
    counts <- table(as.character(dataset$acronym), dataset$right.hemisphere)#
  }#
  #counts <- table(as.character(datasets$acronym), datasets$right.hemisphere)#
  maxCounts<-apply(counts, 1, FUN=max)#
  idxKeepRow<- which(maxCounts>countThreshold)#
  counts<-counts[idxKeepRow,]#
  #hemisphere.to.sort <- which.max(colSums(counts*is.finite(counts),na.rm=TRUE ))#
  if (sorted) {#
  #counts <- cbind(counts, Total = rowSums(counts))#
  counts <- counts[order(counts[, 3], decreasing = TRUE), ]#
  counts <- counts[,1:2]#
  }#
  #counts <- counts[order(counts[, hemisphere.to.sort], decreasing = TRUE), ]#
  counts <- log10(counts)#
  if (device) {#
    #quartz(width = 7.036585, height = 0.2099039 * nrow(counts))#
    quartz(width = 17.036585, height = 20.2099039)#
  }#
  quartz(width = 7.036585, height = 10.2099039)#
  layout(matrix(c(1, 1, 1, 2, 2, 2, 2), nrow = 1))#
  par(mar = c(4, 2, 4, 2))#
  par(mar=rep(1,4))#
  plot(rep(2.5, nrow(counts)), nrow(counts):1, col = 0, #
       axes = F, ylim = c(0.5, nrow(counts) + 0.5), ylab = "", #
       xlab = "", xlim = c(1, 5))#
  mtext(region.lab, 3, cex = 0.9)#
  for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.1)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(1, 5, 5, 1), c(y.lab - 0.5, y.lab - 0.5, #
                             y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
    text(3, y.lab, name.from.acronym(row.names(counts)[i]), #
         cex = 0.9)#
  }#
  par(xpd = TRUE)#
  legend(3, -0.75, c("Left", "Right"), pch = c(21), pt.bg = c("white", #
                                                              gray(0.2)), title = "Hemisphere:", bg = "white", #
         horiz = TRUE, cex = 1.3, xjust = 0.5)#
  par(xpd = FALSE)#
  par(mar = c(4, 4, 4, 6))#
  zeros <- min(is.finite(counts)) - 1#
  counts[!is.finite(counts)] <- zeros#
  x.range <- ceiling(range(counts[is.finite(counts)]))#
  plot(apply(counts, 1, max), nrow(counts):1 - 0.125, pch = 21, #
       bg = "white", ylim = c(0.5, nrow(counts) + 0.5), #
       xlim = x.range, xlab = "", axes = F, ylab = "", col = 0)#
  for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.05)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(x.range, rev(x.range)), c(y.lab - 0.5, #
                                        y.lab - 0.5, y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
  }#
  log.range <- 10^seq(x.range[1], x.range[2])#
  axis(1, at = seq(x.range[1], x.range[2]), las = 1, labels = c(0, #
                                                                log.range[-1]))#
  axis(3, at = seq(x.range[1], x.range[2]), las = 1, labels = c(0, #
                                                                log.range[-1]))#
  log.range <- unlist(lapply(1:(length(log.range) - 1), #
                             function(x) {#
                               seq(log.range[x], log.range[x + 1], by = log.range[x])#
                             }))#
  axis(1, at = log10(log.range), labels = FALSE)#
  axis(3, at = log10(log.range), labels = FALSE)#
  axis(2, at = nrow(counts):1, labels = row.names(counts), #
       las = 1)#
  axis(4, at = nrow(counts):1, labels = row.names(counts), #
       las = 1)#
  abline(h = 1:nrow(counts), lty = 2, col = "gray")#
  abline(v = log10(log.range), col = "lightblue")#
  lapply(1:nrow(counts), function(x) {#
    lines(counts[x, ], rep(nrow(counts) - x + 1, 2), #
          lwd = 2)#
  })#
  points(counts[, 2], nrow(counts):1, #
         pch = 21, bg = gray(0.2), cex = 1.2)#
  points(counts[, 1], nrow(counts):1, #
         pch = 21, bg = "white", cex = 1.2)#
  box()#
  par(xpd = TRUE)#
  polygon(c(x.range[1] + 0.25, x.range[1] + 0.5, x.range[1] + #
              0.5, x.range[1] + 0.25), c(-2, -2, nrow(counts) + #
                                           3, nrow(counts) + 3), col = "white", border = "white")#
  par(xpd = FALSE)#
  abline(v = c(x.range[1] + 0.25, x.range[1] + 0.5))#
  mtext(xlab, 3, 2.2, cex = 0.8)#
  mtext(xlab, 1, 2.2, cex = 0.8)#
}
counts.plot(datasets,countThreshold = 0)
counts.plot<-function (dataset, device = TRUE, region.lab = "Input region:", xlab= 'Cell count', countThreshold = 10, sorted = TRUE) #
{#
  if(ncol(dataset)<3){#
    counts<-dataset#
  }else{#
    counts <- table(as.character(dataset$acronym), dataset$right.hemisphere)#
  }#
  #counts <- table(as.character(datasets$acronym), datasets$right.hemisphere)#
  maxCounts<-apply(counts, 1, FUN=max)#
  idxKeepRow<- which(maxCounts>countThreshold)#
  counts<-counts[idxKeepRow,]#
  #hemisphere.to.sort <- which.max(colSums(counts*is.finite(counts),na.rm=TRUE ))#
  if (sorted) {#
    if (ncol(counts)>1){#
      counts <- cbind(counts, Total = rowSums(counts))#
      counts <- counts[order(counts[, 3], decreasing = TRUE), ]#
      counts <- counts[,1:2]#
    }else{#
      counts <- counts[order(counts, decreasing = TRUE), ]#
    }#
  }#
  #counts <- counts[order(counts[, hemisphere.to.sort], decreasing = TRUE), ]#
  counts <- log10(counts)#
  if (device) {#
    #quartz(width = 7.036585, height = 0.2099039 * nrow(counts))#
    quartz(width = 17.036585, height = 20.2099039)#
  }#
  quartz(width = 7.036585, height = 10.2099039)#
  layout(matrix(c(1, 1, 1, 2, 2, 2, 2), nrow = 1))#
  par(mar = c(4, 2, 4, 2))#
  par(mar=rep(1,4))#
  plot(rep(2.5, nrow(counts)), nrow(counts):1, col = 0, #
       axes = F, ylim = c(0.5, nrow(counts) + 0.5), ylab = "", #
       xlab = "", xlim = c(1, 5))#
  mtext(region.lab, 3, cex = 0.9)#
  for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.1)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(1, 5, 5, 1), c(y.lab - 0.5, y.lab - 0.5, #
                             y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
    text(3, y.lab, name.from.acronym(row.names(counts)[i]), #
         cex = 0.9)#
  }#
  par(xpd = TRUE)#
  legend(3, -0.75, c("Left", "Right"), pch = c(21), pt.bg = c("white", #
                                                              gray(0.2)), title = "Hemisphere:", bg = "white", #
         horiz = TRUE, cex = 1.3, xjust = 0.5)#
  par(xpd = FALSE)#
  par(mar = c(4, 4, 4, 6))#
  zeros <- min(is.finite(counts)) - 1#
  counts[!is.finite(counts)] <- zeros#
  x.range <- ceiling(range(counts[is.finite(counts)]))#
  plot(apply(counts, 1, max), nrow(counts):1 - 0.125, pch = 21, #
       bg = "white", ylim = c(0.5, nrow(counts) + 0.5), #
       xlim = x.range, xlab = "", axes = F, ylab = "", col = 0)#
  for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.05)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(x.range, rev(x.range)), c(y.lab - 0.5, #
                                        y.lab - 0.5, y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
  }#
  log.range <- 10^seq(x.range[1], x.range[2])#
  axis(1, at = seq(x.range[1], x.range[2]), las = 1, labels = c(0, #
                                                                log.range[-1]))#
  axis(3, at = seq(x.range[1], x.range[2]), las = 1, labels = c(0, #
                                                                log.range[-1]))#
  log.range <- unlist(lapply(1:(length(log.range) - 1), #
                             function(x) {#
                               seq(log.range[x], log.range[x + 1], by = log.range[x])#
                             }))#
  axis(1, at = log10(log.range), labels = FALSE)#
  axis(3, at = log10(log.range), labels = FALSE)#
  axis(2, at = nrow(counts):1, labels = row.names(counts), #
       las = 1)#
  axis(4, at = nrow(counts):1, labels = row.names(counts), #
       las = 1)#
  abline(h = 1:nrow(counts), lty = 2, col = "gray")#
  abline(v = log10(log.range), col = "lightblue")#
  lapply(1:nrow(counts), function(x) {#
    lines(counts[x, ], rep(nrow(counts) - x + 1, 2), #
          lwd = 2)#
  })#
  points(counts[, 2], nrow(counts):1, #
         pch = 21, bg = gray(0.2), cex = 1.2)#
  points(counts[, 1], nrow(counts):1, #
         pch = 21, bg = "white", cex = 1.2)#
  box()#
  par(xpd = TRUE)#
  polygon(c(x.range[1] + 0.25, x.range[1] + 0.5, x.range[1] + #
              0.5, x.range[1] + 0.25), c(-2, -2, nrow(counts) + #
                                           3, nrow(counts) + 3), col = "white", border = "white")#
  par(xpd = FALSE)#
  abline(v = c(x.range[1] + 0.25, x.range[1] + 0.5))#
  mtext(xlab, 3, 2.2, cex = 0.8)#
  mtext(xlab, 1, 2.2, cex = 0.8)#
}
counts.plot(datasets,countThreshold = 0)
setwd('/Volumes/GoogleDrive/My Drive/Rabies_registration/wholebrain')#
library(wholebrain)#
genotype <- 'Tac1-noG'#
rm(datasets)#
rm(dataset)#
counts.plot<-function (dataset, device = TRUE, region.lab = "Input region:", xlab= 'Cell count', countThreshold = 0, sorted = TRUE) #
{#
  dataset[1,9]<-FALSE#
  if(ncol(dataset)<3){#
    counts<-dataset#
  }else{#
    counts <- table(as.character(dataset$acronym), dataset$right.hemisphere)#
  }#
  #counts <- table(as.character(datasets$acronym), datasets$right.hemisphere)#
  maxCounts<-apply(counts, 1, FUN=max)#
  idxKeepRow<- which(maxCounts>countThreshold)#
  counts<-counts[idxKeepRow,]#
  #hemisphere.to.sort <- which.max(colSums(counts*is.finite(counts),na.rm=TRUE ))#
  if (sorted) {#
  counts <- cbind(counts, Total = rowSums(counts))#
  counts <- counts[order(counts[, 3], decreasing = TRUE), ]#
  counts <- counts[,1:2]#
  }#
  #counts <- counts[order(counts[, hemisphere.to.sort], decreasing = TRUE), ]#
  counts <- log10(counts)#
  if (device) {#
    #quartz(width = 7.036585, height = 0.2099039 * nrow(counts))#
    quartz(width = 17.036585, height = 20.2099039)#
  }#
  quartz(width = 7.036585, height = 10.2099039)#
  layout(matrix(c(1, 1, 1, 2, 2, 2, 2), nrow = 1))#
  par(mar = c(4, 2, 4, 2))#
  par(mar=rep(1,4))#
  plot(rep(2.5, nrow(counts)), nrow(counts):1, col = 0, #
       axes = F, ylim = c(0.5, nrow(counts) + 0.5), ylab = "", #
       xlab = "", xlim = c(1, 5))#
  mtext(region.lab, 3, cex = 0.9)#
  for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.1)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(1, 5, 5, 1), c(y.lab - 0.5, y.lab - 0.5, #
                             y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
    text(3, y.lab, name.from.acronym(row.names(counts)[i]), #
         cex = 0.9)#
  }#
  par(xpd = TRUE)#
  legend(3, -0.75, c("Left", "Right"), pch = c(21), pt.bg = c("white", #
                                                              gray(0.2)), title = "Hemisphere:", bg = "white", #
         horiz = TRUE, cex = 1.3, xjust = 0.5)#
  par(xpd = FALSE)#
  par(mar = c(4, 4, 4, 6))#
  zeros <- min(is.finite(counts)) - 1#
  counts[!is.finite(counts)] <- zeros#
  x.range <- ceiling(range(counts[is.finite(counts)]))#
  plot(apply(counts, 1, max), nrow(counts):1 - 0.125, pch = 21, #
       bg = "white", ylim = c(0.5, nrow(counts) + 0.5), #
       xlim = x.range, xlab = "", axes = F, ylab = "", col = 0)#
  for (i in 1:nrow(counts)) {#
    regioncolor <- color.from.acronym(row.names(counts)[i])#
    regioncolor <- adjustcolor(regioncolor, alpha.f = 0.05)#
    y.lab <- (nrow(counts) + 1) - i#
    polygon(c(x.range, rev(x.range)), c(y.lab - 0.5, #
                                        y.lab - 0.5, y.lab + 0.5, y.lab + 0.5), col = regioncolor, #
            border = FALSE)#
  }#
  log.range <- 10^seq(x.range[1], x.range[2])#
  axis(1, at = seq(x.range[1], x.range[2]), las = 1, labels = c(0, #
                                                                log.range[-1]))#
  axis(3, at = seq(x.range[1], x.range[2]), las = 1, labels = c(0, #
                                                                log.range[-1]))#
  log.range <- unlist(lapply(1:(length(log.range) - 1), #
                             function(x) {#
                               seq(log.range[x], log.range[x + 1], by = log.range[x])#
                             }))#
  axis(1, at = log10(log.range), labels = FALSE)#
  axis(3, at = log10(log.range), labels = FALSE)#
  axis(2, at = nrow(counts):1, labels = row.names(counts), #
       las = 1)#
  axis(4, at = nrow(counts):1, labels = row.names(counts), #
       las = 1)#
  abline(h = 1:nrow(counts), lty = 2, col = "gray")#
  abline(v = log10(log.range), col = "lightblue")#
  lapply(1:nrow(counts), function(x) {#
    lines(counts[x, ], rep(nrow(counts) - x + 1, 2), #
          lwd = 2)#
  })#
  points(counts[, 2], nrow(counts):1, #
         pch = 21, bg = gray(0.2), cex = 1.2)#
  points(counts[, 1], nrow(counts):1, #
         pch = 21, bg = "white", cex = 1.2)#
  box()#
  par(xpd = TRUE)#
  polygon(c(x.range[1] + 0.25, x.range[1] + 0.5, x.range[1] + #
              0.5, x.range[1] + 0.25), c(-2, -2, nrow(counts) + #
                                           3, nrow(counts) + 3), col = "white", border = "white")#
  par(xpd = FALSE)#
  abline(v = c(x.range[1] + 0.25, x.range[1] + 0.5))#
  mtext(xlab, 3, 2.2, cex = 0.8)#
  mtext(xlab, 1, 2.2, cex = 0.8)#
}#
#
#Mouse to analyze#
mouse<-'m1155'#
#
#set animal folder path#
animalFolder<-file.path(getwd(),'BHdata', mouse)#
imageFolders<-list.files(animalFolder, full.names=TRUE)#
#
#Start with the first section#
i = 2#
sectionFolder = imageFolders[i]#
imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
if (length(imageFiles)==1) {#
  load(imageFiles[1])#
  dataset$animal=mouse#
  datasets<-dataset#
} else {#
  df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
  mostRecent<-rownames(df)[which.max(df$mtime)]#
  load(mostRecent)#
  datasets<-dataset#
}#
#Use Rbind to add addictional sections#
for(i in 3:length(imageFolders)){#
  sectionFolder = imageFolders[i]#
  imageFiles<-list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$")#
  if (length(imageFiles)>0) {#
    if (length(imageFiles)==1) {#
      if (!grepl("x", imageFiles[1], fixed = TRUE)) {#
        load(imageFiles[1])#
        dataset$animal=mouse#
        datasets<-rbind(datasets, dataset)#
      }#
    } else {#
      if (!grepl("x", imageFiles[1], fixed = TRUE)) {#
      df <- file.info(list.files(sectionFolder, full.names=TRUE, pattern = "\\.Rdata$"))#
      mostRecent<-rownames(df)[which.max(df$mtime)]#
      load(mostRecent)#
      dataset$animal=mouse#
      datasets<-rbind(datasets, dataset)#
      }#
    }#
  }#
}#
save(datasets, file=file.path(getwd(), 'Composite Data',genotype,'CompositeData',paste(mouse, '_compositeData.Rdata',sep = "", collapse=NULL)))#
#
#Plot the combined data and save out a combined .Rdata file#
quartz#
counts.plot(datasets)#
filename <- file.path(getwd(), 'Composite Data',genotype,'CompositeData',paste(mouse, '_composite_plot.pdf',sep = "", collapse=NULL))#
quartz.save(filename,type="pdf")
